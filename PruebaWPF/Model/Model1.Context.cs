//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PruebaWPF.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SIFOPEntities : DbContext
    {
        public SIFOPEntities()
            : base("name=SIFOPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AgenteExternoCat> AgenteExternoCat { get; set; }
        public virtual DbSet<IdentificacionAgenteExterno> IdentificacionAgenteExterno { get; set; }
        public virtual DbSet<Moneda> Moneda { get; set; }
        public virtual DbSet<Actividad> Actividad { get; set; }
        public virtual DbSet<AgenteExterno> AgenteExterno { get; set; }
        public virtual DbSet<AutorizarRestricciones> AutorizarRestricciones { get; set; }
        public virtual DbSet<BalanzaComprobacion> BalanzaComprobacion { get; set; }
        public virtual DbSet<Banco> Banco { get; set; }
        public virtual DbSet<Banco_DisponibilidadFondo> Banco_DisponibilidadFondo { get; set; }
        public virtual DbSet<Banco_PeriodoEspecifico> Banco_PeriodoEspecifico { get; set; }
        public virtual DbSet<Banco_TechosPresupuestarios> Banco_TechosPresupuestarios { get; set; }
        public virtual DbSet<Beneficiario> Beneficiario { get; set; }
        public virtual DbSet<Cajero> Cajero { get; set; }
        public virtual DbSet<Carrera> Carrera { get; set; }
        public virtual DbSet<CarreraTipo> CarreraTipo { get; set; }
        public virtual DbSet<CiaTarjetaCredito> CiaTarjetaCredito { get; set; }
        public virtual DbSet<ComprobanteCierre> ComprobanteCierre { get; set; }
        public virtual DbSet<ComprobanteDiario> ComprobanteDiario { get; set; }
        public virtual DbSet<ComprobantePago> ComprobantePago { get; set; }
        public virtual DbSet<Concepto> Concepto { get; set; }
        public virtual DbSet<ConceptoCuenta> ConceptoCuenta { get; set; }
        public virtual DbSet<ConceptoDetalle> ConceptoDetalle { get; set; }
        public virtual DbSet<ConceptoFacultad> ConceptoFacultad { get; set; }
        public virtual DbSet<ConciliacionBanco> ConciliacionBanco { get; set; }
        public virtual DbSet<ConciliacionBancoDetalle> ConciliacionBancoDetalle { get; set; }
        public virtual DbSet<CuentaAuxiliar> CuentaAuxiliar { get; set; }
        public virtual DbSet<CuentaBanco> CuentaBanco { get; set; }
        public virtual DbSet<CuentaCategoria> CuentaCategoria { get; set; }
        public virtual DbSet<CuentaContable> CuentaContable { get; set; }
        public virtual DbSet<Denominacion> Denominacion { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<Distribucion_D> Distribucion_D { get; set; }
        public virtual DbSet<Distribucion_DD> Distribucion_DD { get; set; }
        public virtual DbSet<Docentes> Docentes { get; set; }
        public virtual DbSet<DocumentoEnlace> DocumentoEnlace { get; set; }
        public virtual DbSet<dtproperties> dtproperties { get; set; }
        public virtual DbSet<EjecucionPresupuestaria> EjecucionPresupuestaria { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<EPComprobanteDiario> EPComprobanteDiario { get; set; }
        public virtual DbSet<EPComprobantePago> EPComprobantePago { get; set; }
        public virtual DbSet<EPLineaComprobanteDiario> EPLineaComprobanteDiario { get; set; }
        public virtual DbSet<EPLineaComprobantePago> EPLineaComprobantePago { get; set; }
        public virtual DbSet<ErrorLog> ErrorLog { get; set; }
        public virtual DbSet<EstructuraCuenta> EstructuraCuenta { get; set; }
        public virtual DbSet<EstudianteCarrera> EstudianteCarrera { get; set; }
        public virtual DbSet<Estudiantes> Estudiantes { get; set; }
        public virtual DbSet<Facultad> Facultad { get; set; }
        public virtual DbSet<FuenteFinanciamiento> FuenteFinanciamiento { get; set; }
        public virtual DbSet<LineaComprobanteDiario> LineaComprobanteDiario { get; set; }
        public virtual DbSet<LineaComprobantePago> LineaComprobantePago { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Municipio> Municipio { get; set; }
        public virtual DbSet<Paises> Paises { get; set; }
        public virtual DbSet<ParametroIngresosNC> ParametroIngresosNC { get; set; }
        public virtual DbSet<ParametroLicitacion> ParametroLicitacion { get; set; }
        public virtual DbSet<ParametroRendicion> ParametroRendicion { get; set; }
        public virtual DbSet<Perfil> Perfil { get; set; }
        public virtual DbSet<PerfilContenido> PerfilContenido { get; set; }
        public virtual DbSet<PeriodoEspecifico> PeriodoEspecifico { get; set; }
        public virtual DbSet<PeriodoEspecificoEP> PeriodoEspecificoEP { get; set; }
        public virtual DbSet<PeriodoGeneral> PeriodoGeneral { get; set; }
        public virtual DbSet<Personas> Personas { get; set; }
        public virtual DbSet<PrestamoDocumento> PrestamoDocumento { get; set; }
        public virtual DbSet<PrestamoEstado> PrestamoEstado { get; set; }
        public virtual DbSet<Presupuesto> Presupuesto { get; set; }
        public virtual DbSet<Programa> Programa { get; set; }
        public virtual DbSet<Proveedor> Proveedor { get; set; }
        public virtual DbSet<Proyecto> Proyecto { get; set; }
        public virtual DbSet<Recibo> Recibo { get; set; }
        public virtual DbSet<ReciboBillete> ReciboBillete { get; set; }
        public virtual DbSet<ReciboBono> ReciboBono { get; set; }
        public virtual DbSet<ReciboCheque> ReciboCheque { get; set; }
        public virtual DbSet<ReciboDetalle> ReciboDetalle { get; set; }
        public virtual DbSet<ReciboFlujoEfectivo> ReciboFlujoEfectivo { get; set; }
        public virtual DbSet<ReciboPagare> ReciboPagare { get; set; }
        public virtual DbSet<ReciboTarjeta> ReciboTarjeta { get; set; }
        public virtual DbSet<Recinto> Recinto { get; set; }
        public virtual DbSet<Rendicion> Rendicion { get; set; }
        public virtual DbSet<SolicitudCheque> SolicitudCheque { get; set; }
        public virtual DbSet<SolicitudEstado> SolicitudEstado { get; set; }
        public virtual DbSet<SolicitudRegresada> SolicitudRegresada { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<tblAuditoria> tblAuditoria { get; set; }
        public virtual DbSet<TipoComprobante> TipoComprobante { get; set; }
        public virtual DbSet<TipoCuenta> TipoCuenta { get; set; }
        public virtual DbSet<tmp_SaldoCuentas> tmp_SaldoCuentas { get; set; }
        public virtual DbSet<TmpAnticiposGastos> TmpAnticiposGastos { get; set; }
        public virtual DbSet<TmpAreaIngresos> TmpAreaIngresos { get; set; }
        public virtual DbSet<TmpComprobanteRendir> TmpComprobanteRendir { get; set; }
        public virtual DbSet<TmpConceptoCuenta> TmpConceptoCuenta { get; set; }
        public virtual DbSet<TmpConceptoCuenta_b> TmpConceptoCuenta_b { get; set; }
        public virtual DbSet<TmpConceptoDetalle> TmpConceptoDetalle { get; set; }
        public virtual DbSet<TmpConceptoFacultad> TmpConceptoFacultad { get; set; }
        public virtual DbSet<TmpConciliacionBancoDetalle> TmpConciliacionBancoDetalle { get; set; }
        public virtual DbSet<TmpCuentaAuxiliar> TmpCuentaAuxiliar { get; set; }
        public virtual DbSet<TmpCuentaContable> TmpCuentaContable { get; set; }
        public virtual DbSet<TmpCuentaContable_b> TmpCuentaContable_b { get; set; }
        public virtual DbSet<TmpDistribucion_DD> TmpDistribucion_DD { get; set; }
        public virtual DbSet<TmpEstadoCuenta> TmpEstadoCuenta { get; set; }
        public virtual DbSet<TmpEstructuraCuenta> TmpEstructuraCuenta { get; set; }
        public virtual DbSet<TmpFuenteFinanciamiento> TmpFuenteFinanciamiento { get; set; }
        public virtual DbSet<TmpInformeFinanciero> TmpInformeFinanciero { get; set; }
        public virtual DbSet<TmpLineaComprobante> TmpLineaComprobante { get; set; }
        public virtual DbSet<TmpMontoEgresoFuente> TmpMontoEgresoFuente { get; set; }
        public virtual DbSet<TmpPerfilContenido> TmpPerfilContenido { get; set; }
        public virtual DbSet<TmpPerfilUsuario> TmpPerfilUsuario { get; set; }
        public virtual DbSet<TmpReciboBillete> TmpReciboBillete { get; set; }
        public virtual DbSet<TmpReciboBono> TmpReciboBono { get; set; }
        public virtual DbSet<TmpReciboCheque> TmpReciboCheque { get; set; }
        public virtual DbSet<TmpReciboDetalle> TmpReciboDetalle { get; set; }
        public virtual DbSet<TmpReciboFlujoEfectivo> TmpReciboFlujoEfectivo { get; set; }
        public virtual DbSet<TmpReciboPagare> TmpReciboPagare { get; set; }
        public virtual DbSet<TmpReciboTarjeta> TmpReciboTarjeta { get; set; }
        public virtual DbSet<TmpSolicitudEstado> TmpSolicitudEstado { get; set; }
        public virtual DbSet<TmpSolicitudTesoreria> TmpSolicitudTesoreria { get; set; }
        public virtual DbSet<TmpTransferencia_DD> TmpTransferencia_DD { get; set; }
        public virtual DbSet<TmpUsuarioPermiso> TmpUsuarioPermiso { get; set; }
        public virtual DbSet<TmpUsuarioPrograma> TmpUsuarioPrograma { get; set; }
        public virtual DbSet<TmpVariacionCambiaria> TmpVariacionCambiaria { get; set; }
        public virtual DbSet<Transferencia> Transferencia { get; set; }
        public virtual DbSet<Transferencia_Area_D> Transferencia_Area_D { get; set; }
        public virtual DbSet<Transferencia_Area_DD> Transferencia_Area_DD { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<UsuarioArea> UsuarioArea { get; set; }
        public virtual DbSet<UsuarioAutorizar> UsuarioAutorizar { get; set; }
        public virtual DbSet<UsuarioPerfil> UsuarioPerfil { get; set; }
        public virtual DbSet<UsuarioPrograma> UsuarioPrograma { get; set; }
        public virtual DbSet<VariacionCambiaria> VariacionCambiaria { get; set; }
        public virtual DbSet<Arancel> Arancel { get; set; }
        public virtual DbSet<ArancelArea> ArancelArea { get; set; }
        public virtual DbSet<ArancelPrecio> ArancelPrecio { get; set; }
        public virtual DbSet<ArancelTipoDeposito> ArancelTipoDeposito { get; set; }
        public virtual DbSet<DetOrdenPagoArancel> DetOrdenPagoArancel { get; set; }
        public virtual DbSet<Exoneracion> Exoneracion { get; set; }
        public virtual DbSet<OrdenPago> OrdenPago { get; set; }
        public virtual DbSet<Caja> Caja { get; set; }
        public virtual DbSet<FormaPago> FormaPago { get; set; }
        public virtual DbSet<InfoRecibo> InfoRecibo { get; set; }
        public virtual DbSet<ReciboAnulado> ReciboAnulado { get; set; }
        public virtual DbSet<ReciboDet> ReciboDet { get; set; }
        public virtual DbSet<ReciboPago> ReciboPago { get; set; }
        public virtual DbSet<ReciboPagoBono> ReciboPagoBono { get; set; }
        public virtual DbSet<ReciboPagoCheque> ReciboPagoCheque { get; set; }
        public virtual DbSet<ReciboPagoDeposito> ReciboPagoDeposito { get; set; }
        public virtual DbSet<ReciboPagoTarjeta> ReciboPagoTarjeta { get; set; }
        public virtual DbSet<SerieRecibo> SerieRecibo { get; set; }
        public virtual DbSet<TipoDeposito> TipoDeposito { get; set; }
        public virtual DbSet<AccesoDirectoPerfil> AccesoDirectoPerfil { get; set; }
        public virtual DbSet<AccesoDirectoUsuario> AccesoDirectoUsuario { get; set; }
        public virtual DbSet<Configuracion> Configuracion { get; set; }
        public virtual DbSet<Pantalla> Pantalla { get; set; }
        public virtual DbSet<Permiso> Permiso { get; set; }
        public virtual DbSet<PermisoName> PermisoName { get; set; }
        public virtual DbSet<RecintoEquivalencia> RecintoEquivalencia { get; set; }
        public virtual DbSet<FormulaConversion> FormulaConversion { get; set; }
        public virtual DbSet<Parametro> Parametro { get; set; }
        public virtual DbSet<ParametroContraloria> ParametroContraloria { get; set; }
        public virtual DbSet<ParametroSistema> ParametroSistema { get; set; }
        public virtual DbSet<TmpComprobantePrint> TmpComprobantePrint { get; set; }
        public virtual DbSet<TmpSolicitudesArchivo> TmpSolicitudesArchivo { get; set; }
        public virtual DbSet<vw_Areas> vw_Areas { get; set; }
        public virtual DbSet<vw_ProveedoresSISCOM> vw_ProveedoresSISCOM { get; set; }
        public virtual DbSet<vw_RecintosRH> vw_RecintosRH { get; set; }
        public virtual DbSet<vwCarrerasSIRA> vwCarrerasSIRA { get; set; }
        public virtual DbSet<vwEmpleadosRH> vwEmpleadosRH { get; set; }
        public virtual DbSet<vwEstudiantesSIRA> vwEstudiantesSIRA { get; set; }
        public virtual DbSet<vwSedesSIRA> vwSedesSIRA { get; set; }
        public virtual DbSet<ASD> ASD { get; set; }
        public virtual DbSet<Qry_AsientosProceso> Qry_AsientosProceso { get; set; }
        public virtual DbSet<Qry_ComprobantesaRendir> Qry_ComprobantesaRendir { get; set; }
        public virtual DbSet<Qry_CursosPropedecticos2013> Qry_CursosPropedecticos2013 { get; set; }
        public virtual DbSet<Qry_Empleados_RRHH> Qry_Empleados_RRHH { get; set; }
        public virtual DbSet<Qry_EstadoCuentaCD> Qry_EstadoCuentaCD { get; set; }
        public virtual DbSet<Qry_EstadoCuentaCP> Qry_EstadoCuentaCP { get; set; }
        public virtual DbSet<Qry_FuenteFinanciamiento> Qry_FuenteFinanciamiento { get; set; }
        public virtual DbSet<Qry_Pagos_Matricula> Qry_Pagos_Matricula { get; set; }
        public virtual DbSet<Qry_Personas> Qry_Personas { get; set; }
        public virtual DbSet<Qry_PrestamoDocumentos> Qry_PrestamoDocumentos { get; set; }
        public virtual DbSet<Qry_ProductoCategoria> Qry_ProductoCategoria { get; set; }
        public virtual DbSet<Qry_RecibosPiensa> Qry_RecibosPiensa { get; set; }
        public virtual DbSet<Qry_RendicionesPendientes> Qry_RendicionesPendientes { get; set; }
        public virtual DbSet<Qry_Roc> Qry_Roc { get; set; }
        public virtual DbSet<Qry_SolicitudCompraDetalle> Qry_SolicitudCompraDetalle { get; set; }
        public virtual DbSet<Qry_SolicitudCompras_SISCOM> Qry_SolicitudCompras_SISCOM { get; set; }
        public virtual DbSet<Qry_TechosPresupuestarios> Qry_TechosPresupuestarios { get; set; }
        public virtual DbSet<Qry_Transferencia> Qry_Transferencia { get; set; }
        public virtual DbSet<QryFuenteFinanciamiento> QryFuenteFinanciamiento { get; set; }
        public virtual DbSet<Query_Documentos_Bodega> Query_Documentos_Bodega { get; set; }
        public virtual DbSet<Query_GenerarCD> Query_GenerarCD { get; set; }
        public virtual DbSet<Query_SolcitucCk_SIPPSI> Query_SolcitucCk_SIPPSI { get; set; }
        public virtual DbSet<QueryAreasFinanzas> QueryAreasFinanzas { get; set; }
        public virtual DbSet<V_EstructuraProgramatica> V_EstructuraProgramatica { get; set; }
        public virtual DbSet<vw_AgenteExterno> vw_AgenteExterno { get; set; }
        public virtual DbSet<vw_Beneficiario> vw_Beneficiario { get; set; }
        public virtual DbSet<vw_ComprobantePago> vw_ComprobantePago { get; set; }
        public virtual DbSet<vw_ConsultarRecibos> vw_ConsultarRecibos { get; set; }
        public virtual DbSet<vw_Departamento> vw_Departamento { get; set; }
        public virtual DbSet<vw_Empleado> vw_Empleado { get; set; }
        public virtual DbSet<vw_Empleado_EdoCuenta> vw_Empleado_EdoCuenta { get; set; }
        public virtual DbSet<vw_EstadoCuenta> vw_EstadoCuenta { get; set; }
        public virtual DbSet<vw_Estructura> vw_Estructura { get; set; }
        public virtual DbSet<vw_Estructura_Jerarquia> vw_Estructura_Jerarquia { get; set; }
        public virtual DbSet<vw_EstructuraCuenta> vw_EstructuraCuenta { get; set; }
        public virtual DbSet<vw_Estudiante> vw_Estudiante { get; set; }
        public virtual DbSet<vw_EstudianteActivo> vw_EstudianteActivo { get; set; }
        public virtual DbSet<vw_Facultad> vw_Facultad { get; set; }
        public virtual DbSet<vw_MatriculaPagada> vw_MatriculaPagada { get; set; }
        public virtual DbSet<vw_Municipio> vw_Municipio { get; set; }
        public virtual DbSet<vw_ObtenerPeriodosEspecificos> vw_ObtenerPeriodosEspecificos { get; set; }
        public virtual DbSet<vw_Paises> vw_Paises { get; set; }
        public virtual DbSet<vw_Persona> vw_Persona { get; set; }
        public virtual DbSet<vw_PremaMatricula> vw_PremaMatricula { get; set; }
        public virtual DbSet<vw_Prematricula> vw_Prematricula { get; set; }
        public virtual DbSet<vw_Proveedor> vw_Proveedor { get; set; }
        public virtual DbSet<vw_Proveedor_EdoCuenta> vw_Proveedor_EdoCuenta { get; set; }
        public virtual DbSet<vw_Recibo> vw_Recibo { get; set; }
        public virtual DbSet<vw_Recibo_FormasPago> vw_Recibo_FormasPago { get; set; }
        public virtual DbSet<vw_ReciboBono> vw_ReciboBono { get; set; }
        public virtual DbSet<vw_ReciboCheque> vw_ReciboCheque { get; set; }
        public virtual DbSet<vw_ReciboFlujoEfectivo> vw_ReciboFlujoEfectivo { get; set; }
        public virtual DbSet<vw_ReciboPagare> vw_ReciboPagare { get; set; }
        public virtual DbSet<vw_ReciboReporte> vw_ReciboReporte { get; set; }
        public virtual DbSet<vw_ReciboTarjeta> vw_ReciboTarjeta { get; set; }
        public virtual DbSet<vw_Recinto> vw_Recinto { get; set; }
        public virtual DbSet<vw_RendicionCuenta> vw_RendicionCuenta { get; set; }
        public virtual DbSet<vw_SolicitudCheque> vw_SolicitudCheque { get; set; }
        public virtual DbSet<vw_Transacciones> vw_Transacciones { get; set; }
        public virtual DbSet<Vws_CatalogoContable> Vws_CatalogoContable { get; set; }
        public virtual DbSet<w_LibroMayorAcumulado> w_LibroMayorAcumulado { get; set; }
        public virtual DbSet<w_LibroMayorAcumulado_VA> w_LibroMayorAcumulado_VA { get; set; }
        public virtual DbSet<w_LibroMayorAcumulado_VEP> w_LibroMayorAcumulado_VEP { get; set; }
        public virtual DbSet<w_LibroMayorAcumulado_Vlast> w_LibroMayorAcumulado_Vlast { get; set; }
        public virtual DbSet<vw_FuentesSIPPSI> vw_FuentesSIPPSI { get; set; }
        public virtual DbSet<TipoArancel> TipoArancel { get; set; }
        public virtual DbSet<Arqueo> Arqueo { get; set; }
        public virtual DbSet<ArqueoRecibo> ArqueoRecibo { get; set; }
        public virtual DbSet<DetAperturaCaja> DetAperturaCaja { get; set; }
        public virtual DbSet<AperturaCaja> AperturaCaja { get; set; }
        public virtual DbSet<Recibo1> Recibo1 { get; set; }
    
        [DbFunction("SIFOPEntities", "fn_ConsultarInfoExterna")]
        public virtual IQueryable<fn_ConsultarInfoExterna_Result> fn_ConsultarInfoExterna(Nullable<int> tipoDeposito, string criterio, Nullable<bool> criterioInterno, string texto, Nullable<int> top)
        {
            var tipoDepositoParameter = tipoDeposito.HasValue ?
                new ObjectParameter("TipoDeposito", tipoDeposito) :
                new ObjectParameter("TipoDeposito", typeof(int));
    
            var criterioParameter = criterio != null ?
                new ObjectParameter("Criterio", criterio) :
                new ObjectParameter("Criterio", typeof(string));
    
            var criterioInternoParameter = criterioInterno.HasValue ?
                new ObjectParameter("CriterioInterno", criterioInterno) :
                new ObjectParameter("CriterioInterno", typeof(bool));
    
            var textoParameter = texto != null ?
                new ObjectParameter("Texto", texto) :
                new ObjectParameter("Texto", typeof(string));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("Top", top) :
                new ObjectParameter("Top", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ConsultarInfoExterna_Result>("[SIFOPEntities].[fn_ConsultarInfoExterna](@TipoDeposito, @Criterio, @CriterioInterno, @Texto, @Top)", tipoDepositoParameter, criterioParameter, criterioInternoParameter, textoParameter, topParameter);
        }
    
        [DbFunction("SIFOPEntities", "fn_ObtenerTasaCambio")]
        public virtual IQueryable<fn_ObtenerTasaCambio_Result> fn_ObtenerTasaCambio(Nullable<System.DateTime> fecha, Nullable<int> idMoneda)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idMonedaParameter = idMoneda.HasValue ?
                new ObjectParameter("IdMoneda", idMoneda) :
                new ObjectParameter("IdMoneda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ObtenerTasaCambio_Result>("[SIFOPEntities].[fn_ObtenerTasaCambio](@Fecha, @IdMoneda)", fechaParameter, idMonedaParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes")]
        public virtual IQueryable<Fn_ComparativoComprobantes_Result> Fn_ComparativoComprobantes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes]()");
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes_1")]
        public virtual IQueryable<Fn_ComparativoComprobantes_1_Result> Fn_ComparativoComprobantes_1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_1_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes_1]()");
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes_v1")]
        public virtual IQueryable<Fn_ComparativoComprobantes_v1_Result> Fn_ComparativoComprobantes_v1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_v1_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes_v1]()");
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes_v2")]
        public virtual IQueryable<Fn_ComparativoComprobantes_v2_Result> Fn_ComparativoComprobantes_v2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_v2_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes_v2]()");
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes_Vupdate")]
        public virtual IQueryable<Fn_ComparativoComprobantes_Vupdate_Result> Fn_ComparativoComprobantes_Vupdate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_Vupdate_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes_Vupdate]()");
        }
    
        [DbFunction("SIFOPEntities", "Fn_ComparativoComprobantes_Vupdate1")]
        public virtual IQueryable<Fn_ComparativoComprobantes_Vupdate1_Result> Fn_ComparativoComprobantes_Vupdate1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_ComparativoComprobantes_Vupdate1_Result>("[SIFOPEntities].[Fn_ComparativoComprobantes_Vupdate1]()");
        }
    
        [DbFunction("SIFOPEntities", "fn_TareasActividad")]
        public virtual IQueryable<fn_TareasActividad_Result> fn_TareasActividad()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_TareasActividad_Result>("[SIFOPEntities].[fn_TareasActividad]()");
        }
    
        [DbFunction("SIFOPEntities", "FnCB_GeneraLineasCuenta")]
        public virtual IQueryable<FnCB_GeneraLineasCuenta_Result> FnCB_GeneraLineasCuenta(Nullable<int> idPeriodoEspecifico, Nullable<int> idCuentaContable)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnCB_GeneraLineasCuenta_Result>("[SIFOPEntities].[FnCB_GeneraLineasCuenta](@IdPeriodoEspecifico, @IdCuentaContable)", idPeriodoEspecificoParameter, idCuentaContableParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_AntiguedadSaldo")]
        public virtual IQueryable<fnx_AntiguedadSaldo_Result> fnx_AntiguedadSaldo(string hasta)
        {
            var hastaParameter = hasta != null ?
                new ObjectParameter("Hasta", hasta) :
                new ObjectParameter("Hasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_AntiguedadSaldo_Result>("[SIFOPEntities].[fnx_AntiguedadSaldo](@Hasta)", hastaParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_AntiguedadSaldo_V2")]
        public virtual IQueryable<fnx_AntiguedadSaldo_V2_Result> fnx_AntiguedadSaldo_V2(string hasta)
        {
            var hastaParameter = hasta != null ?
                new ObjectParameter("Hasta", hasta) :
                new ObjectParameter("Hasta", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_AntiguedadSaldo_V2_Result>("[SIFOPEntities].[fnx_AntiguedadSaldo_V2](@Hasta)", hastaParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_Cheque")]
        public virtual IQueryable<fnx_Cheque_Result> fnx_Cheque(Nullable<int> idComprobantePago)
        {
            var idComprobantePagoParameter = idComprobantePago.HasValue ?
                new ObjectParameter("IdComprobantePago", idComprobantePago) :
                new ObjectParameter("IdComprobantePago", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_Cheque_Result>("[SIFOPEntities].[fnx_Cheque](@IdComprobantePago)", idComprobantePagoParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_ComparaDocumentos")]
        public virtual IQueryable<fnx_ComparaDocumentos_Result> fnx_ComparaDocumentos(Nullable<int> idCuentaContable, Nullable<int> idPeriodoEspecifico, Nullable<int> idFuente)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_ComparaDocumentos_Result>("[SIFOPEntities].[fnx_ComparaDocumentos](@IdCuentaContable, @IdPeriodoEspecifico, @IdFuente)", idCuentaContableParameter, idPeriodoEspecificoParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_ComparaDocumentos_Cruzados")]
        public virtual IQueryable<fnx_ComparaDocumentos_Cruzados_Result> fnx_ComparaDocumentos_Cruzados(Nullable<int> idCuentaContable, Nullable<int> idPeriodoEspecifico, Nullable<int> idFuente)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_ComparaDocumentos_Cruzados_Result>("[SIFOPEntities].[fnx_ComparaDocumentos_Cruzados](@IdCuentaContable, @IdPeriodoEspecifico, @IdFuente)", idCuentaContableParameter, idPeriodoEspecificoParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_CR_Distribucion")]
        public virtual IQueryable<Fnx_CR_Distribucion_Result> Fnx_CR_Distribucion(Nullable<int> noDistribucion, Nullable<int> periodo, Nullable<int> fuente)
        {
            var noDistribucionParameter = noDistribucion.HasValue ?
                new ObjectParameter("NoDistribucion", noDistribucion) :
                new ObjectParameter("NoDistribucion", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var fuenteParameter = fuente.HasValue ?
                new ObjectParameter("Fuente", fuente) :
                new ObjectParameter("Fuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_CR_Distribucion_Result>("[SIFOPEntities].[Fnx_CR_Distribucion](@NoDistribucion, @Periodo, @Fuente)", noDistribucionParameter, periodoParameter, fuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_CR_Transferencia_Area")]
        public virtual IQueryable<Fnx_CR_Transferencia_Area_Result> Fnx_CR_Transferencia_Area(Nullable<int> noTransferencia, Nullable<int> periodo)
        {
            var noTransferenciaParameter = noTransferencia.HasValue ?
                new ObjectParameter("NoTransferencia", noTransferencia) :
                new ObjectParameter("NoTransferencia", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_CR_Transferencia_Area_Result>("[SIFOPEntities].[Fnx_CR_Transferencia_Area](@NoTransferencia, @Periodo)", noTransferenciaParameter, periodoParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_Cuentas_aranceles_banpro")]
        public virtual IQueryable<fnx_Cuentas_aranceles_banpro_Result> fnx_Cuentas_aranceles_banpro(Nullable<int> idActividad)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_Cuentas_aranceles_banpro_Result>("[SIFOPEntities].[fnx_Cuentas_aranceles_banpro](@IdActividad)", idActividadParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_DetalleGasto_Año_Area")]
        public virtual IQueryable<Fnx_DetalleGasto_Año_Area_Result> Fnx_DetalleGasto_Año_Area(Nullable<int> anio, Nullable<int> idFuente, Nullable<int> idArea)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("Anio", anio) :
                new ObjectParameter("Anio", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_DetalleGasto_Año_Area_Result>("[SIFOPEntities].[Fnx_DetalleGasto_Año_Area](@Anio, @IdFuente, @IdArea)", anioParameter, idFuenteParameter, idAreaParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Disponible_Transferir")]
        public virtual IQueryable<Fnx_Disponible_Transferir_Result> Fnx_Disponible_Transferir(Nullable<int> annio, Nullable<int> periodo)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Disponible_Transferir_Result>("[SIFOPEntities].[Fnx_Disponible_Transferir](@Annio, @Periodo)", annioParameter, periodoParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Distribucion_Area_Fuente")]
        public virtual IQueryable<Fnx_Distribucion_Area_Fuente_Result> Fnx_Distribucion_Area_Fuente(Nullable<int> idArea, Nullable<int> periodo, Nullable<byte> idFuente)
        {
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Distribucion_Area_Fuente_Result>("[SIFOPEntities].[Fnx_Distribucion_Area_Fuente](@IdArea, @Periodo, @IdFuente)", idAreaParameter, periodoParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_EgresoFuente")]
        public virtual IQueryable<Fnx_EgresoFuente_Result> Fnx_EgresoFuente(Nullable<int> idPeriodoEspecifico)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_EgresoFuente_Result>("[SIFOPEntities].[Fnx_EgresoFuente](@IdPeriodoEspecifico)", idPeriodoEspecificoParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_EgresoFuente_V1")]
        public virtual IQueryable<Fnx_EgresoFuente_V1_Result> Fnx_EgresoFuente_V1(Nullable<int> idPeriodoInicial, Nullable<int> idPeriodoFinal)
        {
            var idPeriodoInicialParameter = idPeriodoInicial.HasValue ?
                new ObjectParameter("IdPeriodoInicial", idPeriodoInicial) :
                new ObjectParameter("IdPeriodoInicial", typeof(int));
    
            var idPeriodoFinalParameter = idPeriodoFinal.HasValue ?
                new ObjectParameter("IdPeriodoFinal", idPeriodoFinal) :
                new ObjectParameter("IdPeriodoFinal", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_EgresoFuente_V1_Result>("[SIFOPEntities].[Fnx_EgresoFuente_V1](@IdPeriodoInicial, @IdPeriodoFinal)", idPeriodoInicialParameter, idPeriodoFinalParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_EgresoFuente_VP")]
        public virtual IQueryable<Fnx_EgresoFuente_VP_Result> Fnx_EgresoFuente_VP(Nullable<int> idPeriodoInicial, Nullable<int> idPeriodoFinal, Nullable<int> idActividad)
        {
            var idPeriodoInicialParameter = idPeriodoInicial.HasValue ?
                new ObjectParameter("IdPeriodoInicial", idPeriodoInicial) :
                new ObjectParameter("IdPeriodoInicial", typeof(int));
    
            var idPeriodoFinalParameter = idPeriodoFinal.HasValue ?
                new ObjectParameter("IdPeriodoFinal", idPeriodoFinal) :
                new ObjectParameter("IdPeriodoFinal", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_EgresoFuente_VP_Result>("[SIFOPEntities].[Fnx_EgresoFuente_VP](@IdPeriodoInicial, @IdPeriodoFinal, @IdActividad)", idPeriodoInicialParameter, idPeriodoFinalParameter, idActividadParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_EjecuciónGasto_Actividad")]
        public virtual IQueryable<Fnx_EjecuciónGasto_Actividad_Result> Fnx_EjecuciónGasto_Actividad(Nullable<int> idPeriodoGeneral, Nullable<int> idActividad)
        {
            var idPeriodoGeneralParameter = idPeriodoGeneral.HasValue ?
                new ObjectParameter("IdPeriodoGeneral", idPeriodoGeneral) :
                new ObjectParameter("IdPeriodoGeneral", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_EjecuciónGasto_Actividad_Result>("[SIFOPEntities].[Fnx_EjecuciónGasto_Actividad](@IdPeriodoGeneral, @IdActividad)", idPeriodoGeneralParameter, idActividadParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_EstadoCuenta_TC")]
        public virtual IQueryable<fnx_EstadoCuenta_TC_Result> fnx_EstadoCuenta_TC(Nullable<byte> tipoCuenta, Nullable<int> periodo)
        {
            var tipoCuentaParameter = tipoCuenta.HasValue ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(byte));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_EstadoCuenta_TC_Result>("[SIFOPEntities].[fnx_EstadoCuenta_TC](@TipoCuenta, @Periodo)", tipoCuentaParameter, periodoParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Genera")]
        public virtual IQueryable<Fnx_Genera_Result> Fnx_Genera(Nullable<int> idPeriodoInicial, Nullable<int> idPeriodoFinal, Nullable<int> idActividad)
        {
            var idPeriodoInicialParameter = idPeriodoInicial.HasValue ?
                new ObjectParameter("IdPeriodoInicial", idPeriodoInicial) :
                new ObjectParameter("IdPeriodoInicial", typeof(int));
    
            var idPeriodoFinalParameter = idPeriodoFinal.HasValue ?
                new ObjectParameter("IdPeriodoFinal", idPeriodoFinal) :
                new ObjectParameter("IdPeriodoFinal", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Genera_Result>("[SIFOPEntities].[Fnx_Genera](@IdPeriodoInicial, @IdPeriodoFinal, @IdActividad)", idPeriodoInicialParameter, idPeriodoFinalParameter, idActividadParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_Genera_LibroMayorAcumulado")]
        public virtual IQueryable<fnx_Genera_LibroMayorAcumulado_Result> fnx_Genera_LibroMayorAcumulado(Nullable<int> idAnio)
        {
            var idAnioParameter = idAnio.HasValue ?
                new ObjectParameter("IdAnio", idAnio) :
                new ObjectParameter("IdAnio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_Genera_LibroMayorAcumulado_Result>("[SIFOPEntities].[fnx_Genera_LibroMayorAcumulado](@IdAnio)", idAnioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_GeneraBalanzaComprobacion")]
        public virtual IQueryable<Fnx_GeneraBalanzaComprobacion_Result> Fnx_GeneraBalanzaComprobacion(Nullable<int> idPeriodo, Nullable<int> idPrograma)
        {
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_GeneraBalanzaComprobacion_Result>("[SIFOPEntities].[Fnx_GeneraBalanzaComprobacion](@IdPeriodo, @IdPrograma)", idPeriodoParameter, idProgramaParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_GeneraBalanzaComprobacion_Auxiliares")]
        public virtual IQueryable<Fnx_GeneraBalanzaComprobacion_Auxiliares_Result> Fnx_GeneraBalanzaComprobacion_Auxiliares(string fI, string fF)
        {
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_GeneraBalanzaComprobacion_Auxiliares_Result>("[SIFOPEntities].[Fnx_GeneraBalanzaComprobacion_Auxiliares](@FI, @FF)", fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_generacategoria_saldos")]
        public virtual IQueryable<fnx_generacategoria_saldos_Result> fnx_generacategoria_saldos(Nullable<int> idPeriodo)
        {
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_generacategoria_saldos_Result>("[SIFOPEntities].[fnx_generacategoria_saldos](@IdPeriodo)", idPeriodoParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_GeneraDetalleArea")]
        public virtual IQueryable<fnx_GeneraDetalleArea_Result> fnx_GeneraDetalleArea(Nullable<int> idArea, Nullable<int> idFuente)
        {
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_GeneraDetalleArea_Result>("[SIFOPEntities].[fnx_GeneraDetalleArea](@IdArea, @IdFuente)", idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_GeneraSolicitud_Documentos")]
        public virtual IQueryable<fnx_GeneraSolicitud_Documentos_Result> fnx_GeneraSolicitud_Documentos(Nullable<int> idPeriodoEspecifico)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_GeneraSolicitud_Documentos_Result>("[SIFOPEntities].[fnx_GeneraSolicitud_Documentos](@IdPeriodoEspecifico)", idPeriodoEspecificoParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_LineasDistribucion")]
        public virtual IQueryable<Fnx_LineasDistribucion_Result> Fnx_LineasDistribucion(Nullable<int> noDistribucion, Nullable<int> periodo, Nullable<int> fuente)
        {
            var noDistribucionParameter = noDistribucion.HasValue ?
                new ObjectParameter("NoDistribucion", noDistribucion) :
                new ObjectParameter("NoDistribucion", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var fuenteParameter = fuente.HasValue ?
                new ObjectParameter("Fuente", fuente) :
                new ObjectParameter("Fuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_LineasDistribucion_Result>("[SIFOPEntities].[Fnx_LineasDistribucion](@NoDistribucion, @Periodo, @Fuente)", noDistribucionParameter, periodoParameter, fuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_Obtener_DetalleIngreso")]
        public virtual IQueryable<fnx_Obtener_DetalleIngreso_Result> fnx_Obtener_DetalleIngreso(Nullable<byte> pI, Nullable<byte> idArea, Nullable<byte> dependencia)
        {
            var pIParameter = pI.HasValue ?
                new ObjectParameter("PI", pI) :
                new ObjectParameter("PI", typeof(byte));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(byte));
    
            var dependenciaParameter = dependencia.HasValue ?
                new ObjectParameter("Dependencia", dependencia) :
                new ObjectParameter("Dependencia", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_Obtener_DetalleIngreso_Result>("[SIFOPEntities].[fnx_Obtener_DetalleIngreso](@PI, @IdArea, @Dependencia)", pIParameter, idAreaParameter, dependenciaParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Obtener_Distribucion_Periodo_Fuente")]
        public virtual IQueryable<Fnx_Obtener_Distribucion_Periodo_Fuente_Result> Fnx_Obtener_Distribucion_Periodo_Fuente(Nullable<int> annio, Nullable<int> periodo, Nullable<int> idArea, Nullable<int> idFuente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Obtener_Distribucion_Periodo_Fuente_Result>("[SIFOPEntities].[Fnx_Obtener_Distribucion_Periodo_Fuente](@Annio, @Periodo, @IdArea, @IdFuente)", annioParameter, periodoParameter, idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Obtener_EstadoCuenta_X_CC")]
        public virtual IQueryable<Fnx_Obtener_EstadoCuenta_X_CC_Result> Fnx_Obtener_EstadoCuenta_X_CC(Nullable<byte> codigo, string fI, string fF)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(byte));
    
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Obtener_EstadoCuenta_X_CC_Result>("[SIFOPEntities].[Fnx_Obtener_EstadoCuenta_X_CC](@Codigo, @FI, @FF)", codigoParameter, fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Obtener_EstadoCuenta_X_TC")]
        public virtual IQueryable<Fnx_Obtener_EstadoCuenta_X_TC_Result> Fnx_Obtener_EstadoCuenta_X_TC(Nullable<int> codigo, Nullable<byte> tipoCuenta, string fI, string fF)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var tipoCuentaParameter = tipoCuenta.HasValue ?
                new ObjectParameter("TipoCuenta", tipoCuenta) :
                new ObjectParameter("TipoCuenta", typeof(byte));
    
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Obtener_EstadoCuenta_X_TC_Result>("[SIFOPEntities].[Fnx_Obtener_EstadoCuenta_X_TC](@Codigo, @TipoCuenta, @FI, @FF)", codigoParameter, tipoCuentaParameter, fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "fnx_Obtener_EstadoResultado")]
        public virtual IQueryable<fnx_Obtener_EstadoResultado_Result> fnx_Obtener_EstadoResultado(Nullable<byte> pI, Nullable<byte> pF, Nullable<byte> idArea, Nullable<byte> dependencia)
        {
            var pIParameter = pI.HasValue ?
                new ObjectParameter("PI", pI) :
                new ObjectParameter("PI", typeof(byte));
    
            var pFParameter = pF.HasValue ?
                new ObjectParameter("PF", pF) :
                new ObjectParameter("PF", typeof(byte));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(byte));
    
            var dependenciaParameter = dependencia.HasValue ?
                new ObjectParameter("Dependencia", dependencia) :
                new ObjectParameter("Dependencia", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnx_Obtener_EstadoResultado_Result>("[SIFOPEntities].[fnx_Obtener_EstadoResultado](@PI, @PF, @IdArea, @Dependencia)", pIParameter, pFParameter, idAreaParameter, dependenciaParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_Obtener_ROC_Periodo_Fuente")]
        public virtual IQueryable<Fnx_Obtener_ROC_Periodo_Fuente_Result> Fnx_Obtener_ROC_Periodo_Fuente(Nullable<int> annio, Nullable<int> mes, Nullable<int> idArea, Nullable<int> idFuente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_Obtener_ROC_Periodo_Fuente_Result>("[SIFOPEntities].[Fnx_Obtener_ROC_Periodo_Fuente](@Annio, @Mes, @IdArea, @IdFuente)", annioParameter, mesParameter, idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_ReciboInforme")]
        public virtual IQueryable<Fnx_ReciboInforme_Result> Fnx_ReciboInforme(string fI, string fF, Nullable<byte> codigo)
        {
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_ReciboInforme_Result>("[SIFOPEntities].[Fnx_ReciboInforme](@FI, @FF, @Codigo)", fIParameter, fFParameter, codigoParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperarDisponibilidad_Año")]
        public virtual IQueryable<Fnx_RecuperarDisponibilidad_Año_Result> Fnx_RecuperarDisponibilidad_Año(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperarDisponibilidad_Año_Result>("[SIFOPEntities].[Fnx_RecuperarDisponibilidad_Año](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperarDisponibilidad_Año_Periodo")]
        public virtual IQueryable<Fnx_RecuperarDisponibilidad_Año_Periodo_Result> Fnx_RecuperarDisponibilidad_Año_Periodo(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperarDisponibilidad_Año_Periodo_Result>("[SIFOPEntities].[Fnx_RecuperarDisponibilidad_Año_Periodo](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperarDisponibilidad_Año_V2")]
        public virtual IQueryable<Fnx_RecuperarDisponibilidad_Año_V2_Result> Fnx_RecuperarDisponibilidad_Año_V2(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperarDisponibilidad_Año_V2_Result>("[SIFOPEntities].[Fnx_RecuperarDisponibilidad_Año_V2](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperarDisponibilidad_Año_V3")]
        public virtual IQueryable<Fnx_RecuperarDisponibilidad_Año_V3_Result> Fnx_RecuperarDisponibilidad_Año_V3(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperarDisponibilidad_Año_V3_Result>("[SIFOPEntities].[Fnx_RecuperarDisponibilidad_Año_V3](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperarDisponibilidad_Año_V4")]
        public virtual IQueryable<Fnx_RecuperarDisponibilidad_Año_V4_Result> Fnx_RecuperarDisponibilidad_Año_V4(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperarDisponibilidad_Año_V4_Result>("[SIFOPEntities].[Fnx_RecuperarDisponibilidad_Año_V4](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperaSaldos_Estructura")]
        public virtual IQueryable<Fnx_RecuperaSaldos_Estructura_Result> Fnx_RecuperaSaldos_Estructura(Nullable<int> annio)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperaSaldos_Estructura_Result>("[SIFOPEntities].[Fnx_RecuperaSaldos_Estructura](@Annio)", annioParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_RecuperaSaldos_Estructura_v2")]
        public virtual IQueryable<Fnx_RecuperaSaldos_Estructura_v2_Result> Fnx_RecuperaSaldos_Estructura_v2(Nullable<int> annio, Nullable<int> mesVigente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var mesVigenteParameter = mesVigente.HasValue ?
                new ObjectParameter("MesVigente", mesVigente) :
                new ObjectParameter("MesVigente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_RecuperaSaldos_Estructura_v2_Result>("[SIFOPEntities].[Fnx_RecuperaSaldos_Estructura_v2](@Annio, @MesVigente)", annioParameter, mesVigenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_SolicitudesDisponible_Pago")]
        public virtual IQueryable<Fnx_SolicitudesDisponible_Pago_Result> Fnx_SolicitudesDisponible_Pago(string fI, string fF)
        {
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_SolicitudesDisponible_Pago_Result>("[SIFOPEntities].[Fnx_SolicitudesDisponible_Pago](@FI, @FF)", fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "Fnx_SolicitudesEstados")]
        public virtual IQueryable<Fnx_SolicitudesEstados_Result> Fnx_SolicitudesEstados(string fI, string fF)
        {
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fnx_SolicitudesEstados_Result>("[SIFOPEntities].[Fnx_SolicitudesEstados](@FI, @FF)", fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "FnxA_Genera_Linea_ROC")]
        public virtual IQueryable<FnxA_Genera_Linea_ROC_Result> FnxA_Genera_Linea_ROC(string fI, string fF)
        {
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnxA_Genera_Linea_ROC_Result>("[SIFOPEntities].[FnxA_Genera_Linea_ROC](@FI, @FF)", fIParameter, fFParameter);
        }
    
        [DbFunction("SIFOPEntities", "FnxA_Obtener_ROC")]
        public virtual IQueryable<FnxA_Obtener_ROC_Result> FnxA_Obtener_ROC(Nullable<int> annio, Nullable<int> mes, Nullable<int> idArea, Nullable<int> idFuente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<FnxA_Obtener_ROC_Result>("[SIFOPEntities].[FnxA_Obtener_ROC](@Annio, @Mes, @IdArea, @IdFuente)", annioParameter, mesParameter, idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Obtener_Cheques_Periodo_Fuente")]
        public virtual IQueryable<Obtener_Cheques_Periodo_Fuente_Result> Obtener_Cheques_Periodo_Fuente(Nullable<int> annio, Nullable<int> mes, Nullable<int> idArea, Nullable<int> idFuente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Obtener_Cheques_Periodo_Fuente_Result>("[SIFOPEntities].[Obtener_Cheques_Periodo_Fuente](@Annio, @Mes, @IdArea, @IdFuente)", annioParameter, mesParameter, idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "Obtener_Transferencia_Periodo_Fuente")]
        public virtual IQueryable<Obtener_Transferencia_Periodo_Fuente_Result> Obtener_Transferencia_Periodo_Fuente(Nullable<int> annio, Nullable<int> mes, Nullable<int> idArea, Nullable<int> idFuente)
        {
            var annioParameter = annio.HasValue ?
                new ObjectParameter("Annio", annio) :
                new ObjectParameter("Annio", typeof(int));
    
            var mesParameter = mes.HasValue ?
                new ObjectParameter("Mes", mes) :
                new ObjectParameter("Mes", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Obtener_Transferencia_Periodo_Fuente_Result>("[SIFOPEntities].[Obtener_Transferencia_Periodo_Fuente](@Annio, @Mes, @IdArea, @IdFuente)", annioParameter, mesParameter, idAreaParameter, idFuenteParameter);
        }
    
        [DbFunction("SIFOPEntities", "SisAccount")]
        public virtual IQueryable<SisAccount_Result> SisAccount(string enterprise)
        {
            var enterpriseParameter = enterprise != null ?
                new ObjectParameter("Enterprise", enterprise) :
                new ObjectParameter("Enterprise", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SisAccount_Result>("[SIFOPEntities].[SisAccount](@Enterprise)", enterpriseParameter);
        }
    
        [DbFunction("SIFOPEntities", "fn_ObtenerMenu")]
        public virtual IQueryable<fn_ObtenerMenu_Result> fn_ObtenerMenu(string user, Nullable<bool> isWeb)
        {
            var userParameter = user != null ?
                new ObjectParameter("user", user) :
                new ObjectParameter("user", typeof(string));
    
            var isWebParameter = isWeb.HasValue ?
                new ObjectParameter("isWeb", isWeb) :
                new ObjectParameter("isWeb", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ObtenerMenu_Result>("[SIFOPEntities].[fn_ObtenerMenu](@user, @isWeb)", userParameter, isWebParameter);
        }
    
        [DbFunction("SIFOPEntities", "LoginInfo")]
        public virtual IQueryable<LoginInfo_Result> LoginInfo(string usuario)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LoginInfo_Result>("[SIFOPEntities].[LoginInfo](@usuario)", usuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> sp_ConvertirDivisas(Nullable<int> idMonedaConvertir, Nullable<int> idMonedaFinal, Nullable<double> monto)
        {
            var idMonedaConvertirParameter = idMonedaConvertir.HasValue ?
                new ObjectParameter("IdMonedaConvertir", idMonedaConvertir) :
                new ObjectParameter("IdMonedaConvertir", typeof(int));
    
            var idMonedaFinalParameter = idMonedaFinal.HasValue ?
                new ObjectParameter("IdMonedaFinal", idMonedaFinal) :
                new ObjectParameter("IdMonedaFinal", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("sp_ConvertirDivisas", idMonedaConvertirParameter, idMonedaFinalParameter, montoParameter);
        }
    
        public virtual int Code_Rethink(string newPassword, string usuario)
        {
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Code_Rethink", newPasswordParameter, usuarioParameter);
        }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual int dt_getproctdef(string objname, string columnname)
        {
            var objnameParameter = objname != null ?
                new ObjectParameter("objname", objname) :
                new ObjectParameter("objname", typeof(string));
    
            var columnnameParameter = columnname != null ?
                new ObjectParameter("columnname", columnname) :
                new ObjectParameter("columnname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getproctdef", objnameParameter, columnnameParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp007()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp007");
        }
    
        public virtual int dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int Sp_AgenteExterno(Nullable<int> idAgenteExterno, Nullable<int> personaCodigo, Nullable<byte> idMunicipio, string nombre, string rUC, string cedula, string contacto, string direccion, string telefono, string fax, string email, string sitioWeb, Nullable<byte> operacion)
        {
            var idAgenteExternoParameter = idAgenteExterno.HasValue ?
                new ObjectParameter("IdAgenteExterno", idAgenteExterno) :
                new ObjectParameter("IdAgenteExterno", typeof(int));
    
            var personaCodigoParameter = personaCodigo.HasValue ?
                new ObjectParameter("PersonaCodigo", personaCodigo) :
                new ObjectParameter("PersonaCodigo", typeof(int));
    
            var idMunicipioParameter = idMunicipio.HasValue ?
                new ObjectParameter("IdMunicipio", idMunicipio) :
                new ObjectParameter("IdMunicipio", typeof(byte));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var rUCParameter = rUC != null ?
                new ObjectParameter("RUC", rUC) :
                new ObjectParameter("RUC", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var sitioWebParameter = sitioWeb != null ?
                new ObjectParameter("SitioWeb", sitioWeb) :
                new ObjectParameter("SitioWeb", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_AgenteExterno", idAgenteExternoParameter, personaCodigoParameter, idMunicipioParameter, nombreParameter, rUCParameter, cedulaParameter, contactoParameter, direccionParameter, telefonoParameter, faxParameter, emailParameter, sitioWebParameter, operacionParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int Sp_Asociar_Cuenta(Nullable<byte> idActividad, Nullable<bool> intervalo, string cuentaInicial, string cuentaFinal)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var intervaloParameter = intervalo.HasValue ?
                new ObjectParameter("Intervalo", intervalo) :
                new ObjectParameter("Intervalo", typeof(bool));
    
            var cuentaInicialParameter = cuentaInicial != null ?
                new ObjectParameter("CuentaInicial", cuentaInicial) :
                new ObjectParameter("CuentaInicial", typeof(string));
    
            var cuentaFinalParameter = cuentaFinal != null ?
                new ObjectParameter("CuentaFinal", cuentaFinal) :
                new ObjectParameter("CuentaFinal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Asociar_Cuenta", idActividadParameter, intervaloParameter, cuentaInicialParameter, cuentaFinalParameter);
        }
    
        public virtual int Sp_Beneficiario(Nullable<int> idBeneficiario, Nullable<int> idEmpleado, Nullable<int> idProveedor, Nullable<int> personaCodigo, Nullable<byte> tipo, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idBeneficiarioParameter = idBeneficiario.HasValue ?
                new ObjectParameter("IdBeneficiario", idBeneficiario) :
                new ObjectParameter("IdBeneficiario", typeof(int));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var personaCodigoParameter = personaCodigo.HasValue ?
                new ObjectParameter("PersonaCodigo", personaCodigo) :
                new ObjectParameter("PersonaCodigo", typeof(int));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Beneficiario", idBeneficiarioParameter, idEmpleadoParameter, idProveedorParameter, personaCodigoParameter, tipoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_Cajero(Nullable<byte> idRecinto, string login, string serie)
        {
            var idRecintoParameter = idRecinto.HasValue ?
                new ObjectParameter("IdRecinto", idRecinto) :
                new ObjectParameter("IdRecinto", typeof(byte));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Cajero", idRecintoParameter, loginParameter, serieParameter);
        }
    
        public virtual int SP_CalculoTotales(string filtro, Nullable<byte> pantalla)
        {
            var filtroParameter = filtro != null ?
                new ObjectParameter("Filtro", filtro) :
                new ObjectParameter("Filtro", typeof(string));
    
            var pantallaParameter = pantalla.HasValue ?
                new ObjectParameter("Pantalla", pantalla) :
                new ObjectParameter("Pantalla", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CalculoTotales", filtroParameter, pantallaParameter);
        }
    
        public virtual int Sp_Comprobante_Cierre(Nullable<byte> idPeriodoGeneral, Nullable<byte> idPrograma)
        {
            var idPeriodoGeneralParameter = idPeriodoGeneral.HasValue ?
                new ObjectParameter("IdPeriodoGeneral", idPeriodoGeneral) :
                new ObjectParameter("IdPeriodoGeneral", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Comprobante_Cierre", idPeriodoGeneralParameter, idProgramaParameter);
        }
    
        public virtual int Sp_Comprobante_Estado_Balanza(Nullable<int> idComprobante, Nullable<byte> tipoComprobante, Nullable<byte> estado, Nullable<byte> idPeriodoEspecifico)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(byte));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Comprobante_Estado_Balanza", idComprobanteParameter, tipoComprobanteParameter, estadoParameter, idPeriodoEspecificoParameter);
        }
    
        public virtual int Sp_Comprobante_Estado_Revertir(Nullable<int> idSolicitudCheque, string idYear, Nullable<int> idComprobante, Nullable<byte> idPeriodoEspecifico, Nullable<bool> tipoComprobante)
        {
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Comprobante_Estado_Revertir", idSolicitudChequeParameter, idYearParameter, idComprobanteParameter, idPeriodoEspecificoParameter, tipoComprobanteParameter);
        }
    
        public virtual int Sp_Comprobante_Estado_Upd(Nullable<int> idComprobante, Nullable<byte> tipoComprobante, Nullable<byte> estado, Nullable<byte> idPeriodoEspecifico)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(byte));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Comprobante_Estado_Upd", idComprobanteParameter, tipoComprobanteParameter, estadoParameter, idPeriodoEspecificoParameter);
        }
    
        public virtual int Sp_Comprobante_Estado_Upd_EP(Nullable<int> idComprobante, Nullable<byte> tipoComprobante, Nullable<byte> estado, Nullable<byte> idPeriodoEspecifico)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(byte));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Comprobante_Estado_Upd_EP", idComprobanteParameter, tipoComprobanteParameter, estadoParameter, idPeriodoEspecificoParameter);
        }
    
        public virtual int Sp_ComprobanteDiario(Nullable<int> idComprobante, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<byte> idTipoComprobante, Nullable<System.DateTime> fecha, string concepto, Nullable<byte> estado, Nullable<byte> idFuenteFinanciamiento, Nullable<int> chequeAsociado, Nullable<int> idComprobantePago, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var idTipoComprobanteParameter = idTipoComprobante.HasValue ?
                new ObjectParameter("IdTipoComprobante", idTipoComprobante) :
                new ObjectParameter("IdTipoComprobante", typeof(byte));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var chequeAsociadoParameter = chequeAsociado.HasValue ?
                new ObjectParameter("ChequeAsociado", chequeAsociado) :
                new ObjectParameter("ChequeAsociado", typeof(int));
    
            var idComprobantePagoParameter = idComprobantePago.HasValue ?
                new ObjectParameter("IdComprobantePago", idComprobantePago) :
                new ObjectParameter("IdComprobantePago", typeof(int));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobanteDiario", idComprobanteParameter, idPeriodoParameter, idProgramaParameter, idTipoComprobanteParameter, fechaParameter, conceptoParameter, estadoParameter, idFuenteFinanciamientoParameter, chequeAsociadoParameter, idComprobantePagoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobanteDiario_EP(Nullable<int> idComprobante, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<byte> idTipoComprobante, Nullable<System.DateTime> fecha, string concepto, Nullable<byte> estado, Nullable<byte> idFuenteFinanciamiento, Nullable<int> chequeAsociado, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var idTipoComprobanteParameter = idTipoComprobante.HasValue ?
                new ObjectParameter("IdTipoComprobante", idTipoComprobante) :
                new ObjectParameter("IdTipoComprobante", typeof(byte));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var chequeAsociadoParameter = chequeAsociado.HasValue ?
                new ObjectParameter("ChequeAsociado", chequeAsociado) :
                new ObjectParameter("ChequeAsociado", typeof(int));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobanteDiario_EP", idComprobanteParameter, idPeriodoParameter, idProgramaParameter, idTipoComprobanteParameter, fechaParameter, conceptoParameter, estadoParameter, idFuenteFinanciamientoParameter, chequeAsociadoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobanteDiario_EP_V1(Nullable<int> idComprobante, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<byte> idTipoComprobante, Nullable<System.DateTime> fecha, string concepto, Nullable<byte> estado, Nullable<byte> idFuenteFinanciamiento, Nullable<int> chequeAsociado, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var idTipoComprobanteParameter = idTipoComprobante.HasValue ?
                new ObjectParameter("IdTipoComprobante", idTipoComprobante) :
                new ObjectParameter("IdTipoComprobante", typeof(byte));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var chequeAsociadoParameter = chequeAsociado.HasValue ?
                new ObjectParameter("ChequeAsociado", chequeAsociado) :
                new ObjectParameter("ChequeAsociado", typeof(int));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobanteDiario_EP_V1", idComprobanteParameter, idPeriodoParameter, idProgramaParameter, idTipoComprobanteParameter, fechaParameter, conceptoParameter, estadoParameter, idFuenteFinanciamientoParameter, chequeAsociadoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobantePago(Nullable<int> idComprobante, Nullable<int> idSolicitudCheque, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<System.DateTime> fecha, Nullable<byte> estado, Nullable<byte> tipoMoneda, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobantePago", idComprobanteParameter, idSolicitudChequeParameter, idPeriodoParameter, idProgramaParameter, fechaParameter, estadoParameter, tipoMonedaParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobantePago_EP(Nullable<int> idComprobante, Nullable<int> idSolicitudCheque, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<System.DateTime> fecha, Nullable<byte> estado, Nullable<byte> tipoMoneda, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobantePago_EP", idComprobanteParameter, idSolicitudChequeParameter, idPeriodoParameter, idProgramaParameter, fechaParameter, estadoParameter, tipoMonedaParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobantePago_EP_V1(Nullable<int> idComprobante, Nullable<int> idSolicitudCheque, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<System.DateTime> fecha, Nullable<byte> estado, Nullable<byte> tipoMoneda, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobantePago_EP_V1", idComprobanteParameter, idSolicitudChequeParameter, idPeriodoParameter, idProgramaParameter, fechaParameter, estadoParameter, tipoMonedaParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ComprobantePago_TMP(Nullable<int> idComprobante, Nullable<int> idSolicitudCheque, Nullable<int> idPeriodo, Nullable<int> idPrograma, Nullable<System.DateTime> fecha, Nullable<byte> estado, Nullable<byte> tipoMoneda, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ComprobantePago_TMP", idComprobanteParameter, idSolicitudChequeParameter, idPeriodoParameter, idProgramaParameter, fechaParameter, estadoParameter, tipoMonedaParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_Concepto(Nullable<short> idConcepto, Nullable<byte> idActividad, Nullable<byte> tipo, Nullable<byte> tipoCentro, Nullable<byte> tipoMoneda, Nullable<System.DateTime> fechaInicial, Nullable<System.DateTime> fechaFinal, Nullable<byte> idFuenteFinanciamiento, string descripcion, Nullable<decimal> monto, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idConceptoParameter = idConcepto.HasValue ?
                new ObjectParameter("IdConcepto", idConcepto) :
                new ObjectParameter("IdConcepto", typeof(short));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(byte));
    
            var tipoCentroParameter = tipoCentro.HasValue ?
                new ObjectParameter("TipoCentro", tipoCentro) :
                new ObjectParameter("TipoCentro", typeof(byte));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var fechaInicialParameter = fechaInicial.HasValue ?
                new ObjectParameter("FechaInicial", fechaInicial) :
                new ObjectParameter("FechaInicial", typeof(System.DateTime));
    
            var fechaFinalParameter = fechaFinal.HasValue ?
                new ObjectParameter("FechaFinal", fechaFinal) :
                new ObjectParameter("FechaFinal", typeof(System.DateTime));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Concepto", idConceptoParameter, idActividadParameter, tipoParameter, tipoCentroParameter, tipoMonedaParameter, fechaInicialParameter, fechaFinalParameter, idFuenteFinanciamientoParameter, descripcionParameter, montoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_ConciliacionBanco(Nullable<short> idConciliacionBanco, Nullable<System.DateTime> fecha, Nullable<byte> idPeriodoEspecifico, Nullable<short> idCuentaContable, Nullable<byte> tipoMoneda, Nullable<decimal> saldoLibroCordoba, Nullable<decimal> saldoLibroDolar, Nullable<decimal> saldoBancoCordoba, Nullable<decimal> saldoBancoDolar, string observacion, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idConciliacionBancoParameter = idConciliacionBanco.HasValue ?
                new ObjectParameter("IdConciliacionBanco", idConciliacionBanco) :
                new ObjectParameter("IdConciliacionBanco", typeof(short));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(short));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var saldoLibroCordobaParameter = saldoLibroCordoba.HasValue ?
                new ObjectParameter("SaldoLibroCordoba", saldoLibroCordoba) :
                new ObjectParameter("SaldoLibroCordoba", typeof(decimal));
    
            var saldoLibroDolarParameter = saldoLibroDolar.HasValue ?
                new ObjectParameter("SaldoLibroDolar", saldoLibroDolar) :
                new ObjectParameter("SaldoLibroDolar", typeof(decimal));
    
            var saldoBancoCordobaParameter = saldoBancoCordoba.HasValue ?
                new ObjectParameter("SaldoBancoCordoba", saldoBancoCordoba) :
                new ObjectParameter("SaldoBancoCordoba", typeof(decimal));
    
            var saldoBancoDolarParameter = saldoBancoDolar.HasValue ?
                new ObjectParameter("SaldoBancoDolar", saldoBancoDolar) :
                new ObjectParameter("SaldoBancoDolar", typeof(decimal));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_ConciliacionBanco", idConciliacionBancoParameter, fechaParameter, idPeriodoEspecificoParameter, idCuentaContableParameter, tipoMonedaParameter, saldoLibroCordobaParameter, saldoLibroDolarParameter, saldoBancoCordobaParameter, saldoBancoDolarParameter, observacionParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int sp_CreaLogin(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CreaLogin", loginParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int Sp_Cuenta_Codigo(string cuentaSuperior, Nullable<bool> balanceResultado)
        {
            var cuentaSuperiorParameter = cuentaSuperior != null ?
                new ObjectParameter("CuentaSuperior", cuentaSuperior) :
                new ObjectParameter("CuentaSuperior", typeof(string));
    
            var balanceResultadoParameter = balanceResultado.HasValue ?
                new ObjectParameter("BalanceResultado", balanceResultado) :
                new ObjectParameter("BalanceResultado", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Cuenta_Codigo", cuentaSuperiorParameter, balanceResultadoParameter);
        }
    
        public virtual int Sp_CuentaAuxiliarMod(Nullable<int> idCuentaContable)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CuentaAuxiliarMod", idCuentaContableParameter);
        }
    
        public virtual int Sp_CuentaBalanza_Admin(Nullable<byte> idPeriodoEspecifico, Nullable<byte> periodoEstado, Nullable<byte> idPrograma, Nullable<int> idCuenta_cur, Nullable<int> idActividad_cur, Nullable<bool> debeHaber_cur, Nullable<decimal> montoCuenta)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var periodoEstadoParameter = periodoEstado.HasValue ?
                new ObjectParameter("PeriodoEstado", periodoEstado) :
                new ObjectParameter("PeriodoEstado", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            var idCuenta_curParameter = idCuenta_cur.HasValue ?
                new ObjectParameter("IdCuenta_cur", idCuenta_cur) :
                new ObjectParameter("IdCuenta_cur", typeof(int));
    
            var idActividad_curParameter = idActividad_cur.HasValue ?
                new ObjectParameter("IdActividad_cur", idActividad_cur) :
                new ObjectParameter("IdActividad_cur", typeof(int));
    
            var debeHaber_curParameter = debeHaber_cur.HasValue ?
                new ObjectParameter("DebeHaber_cur", debeHaber_cur) :
                new ObjectParameter("DebeHaber_cur", typeof(bool));
    
            var montoCuentaParameter = montoCuenta.HasValue ?
                new ObjectParameter("MontoCuenta", montoCuenta) :
                new ObjectParameter("MontoCuenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CuentaBalanza_Admin", idPeriodoEspecificoParameter, periodoEstadoParameter, idProgramaParameter, idCuenta_curParameter, idActividad_curParameter, debeHaber_curParameter, montoCuentaParameter);
        }
    
        public virtual int Sp_CuentaComplementariaMod(Nullable<int> idCuentaContable)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CuentaComplementariaMod", idCuentaContableParameter);
        }
    
        public virtual int Sp_CuentaContable(Nullable<int> idCuentaContable, Nullable<byte> idTipoCuenta, string cuentaSuperior, string cuentaContable, string descripcion, Nullable<bool> tipo, Nullable<bool> balanceResultado, Nullable<bool> acumulativa, string instructivo, string instructivoDebito, string instructivoCredito, string observacion, Nullable<bool> estado, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idTipoCuentaParameter = idTipoCuenta.HasValue ?
                new ObjectParameter("IdTipoCuenta", idTipoCuenta) :
                new ObjectParameter("IdTipoCuenta", typeof(byte));
    
            var cuentaSuperiorParameter = cuentaSuperior != null ?
                new ObjectParameter("CuentaSuperior", cuentaSuperior) :
                new ObjectParameter("CuentaSuperior", typeof(string));
    
            var cuentaContableParameter = cuentaContable != null ?
                new ObjectParameter("CuentaContable", cuentaContable) :
                new ObjectParameter("CuentaContable", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(bool));
    
            var balanceResultadoParameter = balanceResultado.HasValue ?
                new ObjectParameter("BalanceResultado", balanceResultado) :
                new ObjectParameter("BalanceResultado", typeof(bool));
    
            var acumulativaParameter = acumulativa.HasValue ?
                new ObjectParameter("Acumulativa", acumulativa) :
                new ObjectParameter("Acumulativa", typeof(bool));
    
            var instructivoParameter = instructivo != null ?
                new ObjectParameter("Instructivo", instructivo) :
                new ObjectParameter("Instructivo", typeof(string));
    
            var instructivoDebitoParameter = instructivoDebito != null ?
                new ObjectParameter("InstructivoDebito", instructivoDebito) :
                new ObjectParameter("InstructivoDebito", typeof(string));
    
            var instructivoCreditoParameter = instructivoCredito != null ?
                new ObjectParameter("InstructivoCredito", instructivoCredito) :
                new ObjectParameter("InstructivoCredito", typeof(string));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(bool));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CuentaContable", idCuentaContableParameter, idTipoCuentaParameter, cuentaSuperiorParameter, cuentaContableParameter, descripcionParameter, tipoParameter, balanceResultadoParameter, acumulativaParameter, instructivoParameter, instructivoDebitoParameter, instructivoCreditoParameter, observacionParameter, estadoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_CuentaEPresupuestaria_Admin(Nullable<byte> idPeriodoEspecifico, Nullable<byte> periodoEstado, Nullable<byte> idPrograma, Nullable<int> idCuenta_cur, Nullable<int> idActividad_cur, Nullable<bool> debeHaber_cur, Nullable<decimal> montoCuenta)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var periodoEstadoParameter = periodoEstado.HasValue ?
                new ObjectParameter("PeriodoEstado", periodoEstado) :
                new ObjectParameter("PeriodoEstado", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            var idCuenta_curParameter = idCuenta_cur.HasValue ?
                new ObjectParameter("IdCuenta_cur", idCuenta_cur) :
                new ObjectParameter("IdCuenta_cur", typeof(int));
    
            var idActividad_curParameter = idActividad_cur.HasValue ?
                new ObjectParameter("IdActividad_cur", idActividad_cur) :
                new ObjectParameter("IdActividad_cur", typeof(int));
    
            var debeHaber_curParameter = debeHaber_cur.HasValue ?
                new ObjectParameter("DebeHaber_cur", debeHaber_cur) :
                new ObjectParameter("DebeHaber_cur", typeof(bool));
    
            var montoCuentaParameter = montoCuenta.HasValue ?
                new ObjectParameter("MontoCuenta", montoCuenta) :
                new ObjectParameter("MontoCuenta", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_CuentaEPresupuestaria_Admin", idPeriodoEspecificoParameter, periodoEstadoParameter, idProgramaParameter, idCuenta_curParameter, idActividad_curParameter, debeHaber_curParameter, montoCuentaParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_EgresoActividad_Result> sp_EgresoActividad(Nullable<int> idPeriodoEspecifico)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EgresoActividad_Result>("sp_EgresoActividad", idPeriodoEspecificoParameter);
        }
    
        public virtual int sp_EgresoFuente(Nullable<int> idPeriodoInicial, Nullable<int> idActividad)
        {
            var idPeriodoInicialParameter = idPeriodoInicial.HasValue ?
                new ObjectParameter("IdPeriodoInicial", idPeriodoInicial) :
                new ObjectParameter("IdPeriodoInicial", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_EgresoFuente", idPeriodoInicialParameter, idActividadParameter);
        }
    
        public virtual int Sp_Empleado(Nullable<int> idEmpleado, Nullable<int> personaCodigo, Nullable<int> idCuentaContable, Nullable<int> idCuentaContableAnticipo, string primerNombre, string segundoNombre, string primerApellido, string segundoApellido, string cedula, string iNSS, string ubicacion, string cargo, string extension, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var personaCodigoParameter = personaCodigo.HasValue ?
                new ObjectParameter("PersonaCodigo", personaCodigo) :
                new ObjectParameter("PersonaCodigo", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idCuentaContableAnticipoParameter = idCuentaContableAnticipo.HasValue ?
                new ObjectParameter("IdCuentaContableAnticipo", idCuentaContableAnticipo) :
                new ObjectParameter("IdCuentaContableAnticipo", typeof(int));
    
            var primerNombreParameter = primerNombre != null ?
                new ObjectParameter("PrimerNombre", primerNombre) :
                new ObjectParameter("PrimerNombre", typeof(string));
    
            var segundoNombreParameter = segundoNombre != null ?
                new ObjectParameter("SegundoNombre", segundoNombre) :
                new ObjectParameter("SegundoNombre", typeof(string));
    
            var primerApellidoParameter = primerApellido != null ?
                new ObjectParameter("PrimerApellido", primerApellido) :
                new ObjectParameter("PrimerApellido", typeof(string));
    
            var segundoApellidoParameter = segundoApellido != null ?
                new ObjectParameter("SegundoApellido", segundoApellido) :
                new ObjectParameter("SegundoApellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var iNSSParameter = iNSS != null ?
                new ObjectParameter("INSS", iNSS) :
                new ObjectParameter("INSS", typeof(string));
    
            var ubicacionParameter = ubicacion != null ?
                new ObjectParameter("Ubicacion", ubicacion) :
                new ObjectParameter("Ubicacion", typeof(string));
    
            var cargoParameter = cargo != null ?
                new ObjectParameter("Cargo", cargo) :
                new ObjectParameter("Cargo", typeof(string));
    
            var extensionParameter = extension != null ?
                new ObjectParameter("Extension", extension) :
                new ObjectParameter("Extension", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Empleado", idEmpleadoParameter, personaCodigoParameter, idCuentaContableParameter, idCuentaContableAnticipoParameter, primerNombreParameter, segundoNombreParameter, primerApellidoParameter, segundoApellidoParameter, cedulaParameter, iNSSParameter, ubicacionParameter, cargoParameter, extensionParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_Empleado_EdoCuenta(Nullable<int> idEmpleado, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Empleado_EdoCuenta", idEmpleadoParameter, fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual int Sp_Empleado_EdoCuenta_V1(Nullable<int> idEmpleado, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Empleado_EdoCuenta_V1", idEmpleadoParameter, fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual int Sp_EstructuraCuenta(Nullable<byte> idActividad, Nullable<byte> evento)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_EstructuraCuenta", idActividadParameter, eventoParameter);
        }
    
        public virtual int Sp_GenerarInforme(Nullable<byte> idPeriodoInicial, Nullable<byte> idPeriodoFinal, Nullable<byte> idPrograma, Nullable<byte> idActividad, Nullable<byte> tipoReporte, string login)
        {
            var idPeriodoInicialParameter = idPeriodoInicial.HasValue ?
                new ObjectParameter("IdPeriodoInicial", idPeriodoInicial) :
                new ObjectParameter("IdPeriodoInicial", typeof(byte));
    
            var idPeriodoFinalParameter = idPeriodoFinal.HasValue ?
                new ObjectParameter("IdPeriodoFinal", idPeriodoFinal) :
                new ObjectParameter("IdPeriodoFinal", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var tipoReporteParameter = tipoReporte.HasValue ?
                new ObjectParameter("TipoReporte", tipoReporte) :
                new ObjectParameter("TipoReporte", typeof(byte));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_GenerarInforme", idPeriodoInicialParameter, idPeriodoFinalParameter, idProgramaParameter, idActividadParameter, tipoReporteParameter, loginParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int Sp_Linea_Comprobante_Del(Nullable<int> idComprobante, Nullable<byte> tipoComprobante, Nullable<int> idPrograma, Nullable<int> idAsiento, Nullable<int> idOrden, Nullable<int> agrupa, Nullable<int> idGrupo, Nullable<bool> debeHaber)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var idAsientoParameter = idAsiento.HasValue ?
                new ObjectParameter("IdAsiento", idAsiento) :
                new ObjectParameter("IdAsiento", typeof(int));
    
            var idOrdenParameter = idOrden.HasValue ?
                new ObjectParameter("IdOrden", idOrden) :
                new ObjectParameter("IdOrden", typeof(int));
    
            var agrupaParameter = agrupa.HasValue ?
                new ObjectParameter("Agrupa", agrupa) :
                new ObjectParameter("Agrupa", typeof(int));
    
            var idGrupoParameter = idGrupo.HasValue ?
                new ObjectParameter("IdGrupo", idGrupo) :
                new ObjectParameter("IdGrupo", typeof(int));
    
            var debeHaberParameter = debeHaber.HasValue ?
                new ObjectParameter("DebeHaber", debeHaber) :
                new ObjectParameter("DebeHaber", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Linea_Comprobante_Del", idComprobanteParameter, tipoComprobanteParameter, idProgramaParameter, idAsientoParameter, idOrdenParameter, agrupaParameter, idGrupoParameter, debeHaberParameter);
        }
    
        public virtual int Sp_Linea_Comprobante_Ins(Nullable<int> idComprobante, Nullable<byte> tipoComprobante, Nullable<int> idPrograma, Nullable<int> idCuentaContable, Nullable<int> idActividad, Nullable<int> idAuxiliar, Nullable<decimal> monto, Nullable<bool> debeHaber)
        {
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var tipoComprobanteParameter = tipoComprobante.HasValue ?
                new ObjectParameter("TipoComprobante", tipoComprobante) :
                new ObjectParameter("TipoComprobante", typeof(byte));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var idAuxiliarParameter = idAuxiliar.HasValue ?
                new ObjectParameter("IdAuxiliar", idAuxiliar) :
                new ObjectParameter("IdAuxiliar", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var debeHaberParameter = debeHaber.HasValue ?
                new ObjectParameter("DebeHaber", debeHaber) :
                new ObjectParameter("DebeHaber", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Linea_Comprobante_Ins", idComprobanteParameter, tipoComprobanteParameter, idProgramaParameter, idCuentaContableParameter, idActividadParameter, idAuxiliarParameter, montoParameter, debeHaberParameter);
        }
    
        public virtual int Sp_MontoEgresoFuente(Nullable<byte> idPeriodoEspecifico)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_MontoEgresoFuente", idPeriodoEspecificoParameter);
        }
    
        public virtual int Sp_MontoEgresoFuente_VEP(Nullable<byte> idPeriodoEspecifico)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_MontoEgresoFuente_VEP", idPeriodoEspecificoParameter);
        }
    
        public virtual int Sp_Perfil(Nullable<int> idPerfil, string perfil, string descripcion, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idPerfilParameter = idPerfil.HasValue ?
                new ObjectParameter("IdPerfil", idPerfil) :
                new ObjectParameter("IdPerfil", typeof(int));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("Perfil", perfil) :
                new ObjectParameter("Perfil", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Perfil", idPerfilParameter, perfilParameter, descripcionParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_Perfil_Diferenciado(Nullable<int> idPerfil)
        {
            var idPerfilParameter = idPerfil.HasValue ?
                new ObjectParameter("IdPerfil", idPerfil) :
                new ObjectParameter("IdPerfil", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Perfil_Diferenciado", idPerfilParameter);
        }
    
        public virtual int Sp_PerfilContenido_Ins(Nullable<int> idPerfil, Nullable<int> iDMenu, Nullable<int> noItem, Nullable<int> noFuncion, string nombre, Nullable<bool> visualizar, Nullable<bool> crear, Nullable<bool> editar, Nullable<bool> eliminar, Nullable<bool> imprimir, Nullable<bool> ejecutar)
        {
            var idPerfilParameter = idPerfil.HasValue ?
                new ObjectParameter("IdPerfil", idPerfil) :
                new ObjectParameter("IdPerfil", typeof(int));
    
            var iDMenuParameter = iDMenu.HasValue ?
                new ObjectParameter("IDMenu", iDMenu) :
                new ObjectParameter("IDMenu", typeof(int));
    
            var noItemParameter = noItem.HasValue ?
                new ObjectParameter("NoItem", noItem) :
                new ObjectParameter("NoItem", typeof(int));
    
            var noFuncionParameter = noFuncion.HasValue ?
                new ObjectParameter("NoFuncion", noFuncion) :
                new ObjectParameter("NoFuncion", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var visualizarParameter = visualizar.HasValue ?
                new ObjectParameter("Visualizar", visualizar) :
                new ObjectParameter("Visualizar", typeof(bool));
    
            var crearParameter = crear.HasValue ?
                new ObjectParameter("Crear", crear) :
                new ObjectParameter("Crear", typeof(bool));
    
            var editarParameter = editar.HasValue ?
                new ObjectParameter("Editar", editar) :
                new ObjectParameter("Editar", typeof(bool));
    
            var eliminarParameter = eliminar.HasValue ?
                new ObjectParameter("Eliminar", eliminar) :
                new ObjectParameter("Eliminar", typeof(bool));
    
            var imprimirParameter = imprimir.HasValue ?
                new ObjectParameter("Imprimir", imprimir) :
                new ObjectParameter("Imprimir", typeof(bool));
    
            var ejecutarParameter = ejecutar.HasValue ?
                new ObjectParameter("Ejecutar", ejecutar) :
                new ObjectParameter("Ejecutar", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PerfilContenido_Ins", idPerfilParameter, iDMenuParameter, noItemParameter, noFuncionParameter, nombreParameter, visualizarParameter, crearParameter, editarParameter, eliminarParameter, imprimirParameter, ejecutarParameter);
        }
    
        public virtual int Sp_PerfilContenido_Padres(Nullable<int> idPerfil, Nullable<int> iDMenu, Nullable<int> noItem, Nullable<int> noFuncion)
        {
            var idPerfilParameter = idPerfil.HasValue ?
                new ObjectParameter("IdPerfil", idPerfil) :
                new ObjectParameter("IdPerfil", typeof(int));
    
            var iDMenuParameter = iDMenu.HasValue ?
                new ObjectParameter("IDMenu", iDMenu) :
                new ObjectParameter("IDMenu", typeof(int));
    
            var noItemParameter = noItem.HasValue ?
                new ObjectParameter("NoItem", noItem) :
                new ObjectParameter("NoItem", typeof(int));
    
            var noFuncionParameter = noFuncion.HasValue ?
                new ObjectParameter("NoFuncion", noFuncion) :
                new ObjectParameter("NoFuncion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_PerfilContenido_Padres", idPerfilParameter, iDMenuParameter, noItemParameter, noFuncionParameter);
        }
    
        public virtual int Sp_Proveedor(Nullable<int> idProveedor, Nullable<int> personaCodigo, Nullable<int> idCuentaContable, Nullable<int> idEmpleado, Nullable<byte> idMunicipio, string nombreComercial, string proveedor, string rUC, string cedula, string contacto, string direccion, string telefono, string fax, string email, string sitioWeb, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var personaCodigoParameter = personaCodigo.HasValue ?
                new ObjectParameter("PersonaCodigo", personaCodigo) :
                new ObjectParameter("PersonaCodigo", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idMunicipioParameter = idMunicipio.HasValue ?
                new ObjectParameter("IdMunicipio", idMunicipio) :
                new ObjectParameter("IdMunicipio", typeof(byte));
    
            var nombreComercialParameter = nombreComercial != null ?
                new ObjectParameter("NombreComercial", nombreComercial) :
                new ObjectParameter("NombreComercial", typeof(string));
    
            var proveedorParameter = proveedor != null ?
                new ObjectParameter("Proveedor", proveedor) :
                new ObjectParameter("Proveedor", typeof(string));
    
            var rUCParameter = rUC != null ?
                new ObjectParameter("RUC", rUC) :
                new ObjectParameter("RUC", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("Cedula", cedula) :
                new ObjectParameter("Cedula", typeof(string));
    
            var contactoParameter = contacto != null ?
                new ObjectParameter("Contacto", contacto) :
                new ObjectParameter("Contacto", typeof(string));
    
            var direccionParameter = direccion != null ?
                new ObjectParameter("Direccion", direccion) :
                new ObjectParameter("Direccion", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("Telefono", telefono) :
                new ObjectParameter("Telefono", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var sitioWebParameter = sitioWeb != null ?
                new ObjectParameter("SitioWeb", sitioWeb) :
                new ObjectParameter("SitioWeb", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Proveedor", idProveedorParameter, personaCodigoParameter, idCuentaContableParameter, idEmpleadoParameter, idMunicipioParameter, nombreComercialParameter, proveedorParameter, rUCParameter, cedulaParameter, contactoParameter, direccionParameter, telefonoParameter, faxParameter, emailParameter, sitioWebParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_Proveedor_EdoCuenta(Nullable<int> idProveedor, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin)
        {
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Proveedor_EdoCuenta", idProveedorParameter, fechaInicioParameter, fechaFinParameter);
        }
    
        public virtual int Sp_Recibo(Nullable<int> idRecibo, string serieRecibo, Nullable<byte> idPrograma, Nullable<byte> idRecinto, Nullable<byte> idPeriodoEspecifico, Nullable<System.DateTime> fecha, Nullable<byte> tipoMoneda, Nullable<decimal> tasaCambio, string idActividad, Nullable<int> idPrematricula, string aLCodigo, string estudianteCarne, Nullable<int> idEmpleado, Nullable<int> idProveedor, Nullable<int> idAgenteExterno, string recibimos, Nullable<bool> efectivo, Nullable<bool> cheque, Nullable<bool> tarjetaCredito, Nullable<bool> pagare, Nullable<bool> bono, Nullable<decimal> monto, Nullable<byte> idFuenteFinanciamiento, Nullable<short> idConcepto, Nullable<byte> evento)
        {
            var idReciboParameter = idRecibo.HasValue ?
                new ObjectParameter("IdRecibo", idRecibo) :
                new ObjectParameter("IdRecibo", typeof(int));
    
            var serieReciboParameter = serieRecibo != null ?
                new ObjectParameter("SerieRecibo", serieRecibo) :
                new ObjectParameter("SerieRecibo", typeof(string));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            var idRecintoParameter = idRecinto.HasValue ?
                new ObjectParameter("IdRecinto", idRecinto) :
                new ObjectParameter("IdRecinto", typeof(byte));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var tasaCambioParameter = tasaCambio.HasValue ?
                new ObjectParameter("TasaCambio", tasaCambio) :
                new ObjectParameter("TasaCambio", typeof(decimal));
    
            var idActividadParameter = idActividad != null ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(string));
    
            var idPrematriculaParameter = idPrematricula.HasValue ?
                new ObjectParameter("IdPrematricula", idPrematricula) :
                new ObjectParameter("IdPrematricula", typeof(int));
    
            var aLCodigoParameter = aLCodigo != null ?
                new ObjectParameter("ALCodigo", aLCodigo) :
                new ObjectParameter("ALCodigo", typeof(string));
    
            var estudianteCarneParameter = estudianteCarne != null ?
                new ObjectParameter("EstudianteCarne", estudianteCarne) :
                new ObjectParameter("EstudianteCarne", typeof(string));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idAgenteExternoParameter = idAgenteExterno.HasValue ?
                new ObjectParameter("IdAgenteExterno", idAgenteExterno) :
                new ObjectParameter("IdAgenteExterno", typeof(int));
    
            var recibimosParameter = recibimos != null ?
                new ObjectParameter("Recibimos", recibimos) :
                new ObjectParameter("Recibimos", typeof(string));
    
            var efectivoParameter = efectivo.HasValue ?
                new ObjectParameter("Efectivo", efectivo) :
                new ObjectParameter("Efectivo", typeof(bool));
    
            var chequeParameter = cheque.HasValue ?
                new ObjectParameter("Cheque", cheque) :
                new ObjectParameter("Cheque", typeof(bool));
    
            var tarjetaCreditoParameter = tarjetaCredito.HasValue ?
                new ObjectParameter("TarjetaCredito", tarjetaCredito) :
                new ObjectParameter("TarjetaCredito", typeof(bool));
    
            var pagareParameter = pagare.HasValue ?
                new ObjectParameter("Pagare", pagare) :
                new ObjectParameter("Pagare", typeof(bool));
    
            var bonoParameter = bono.HasValue ?
                new ObjectParameter("Bono", bono) :
                new ObjectParameter("Bono", typeof(bool));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var idConceptoParameter = idConcepto.HasValue ?
                new ObjectParameter("IdConcepto", idConcepto) :
                new ObjectParameter("IdConcepto", typeof(short));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Recibo", idReciboParameter, serieReciboParameter, idProgramaParameter, idRecintoParameter, idPeriodoEspecificoParameter, fechaParameter, tipoMonedaParameter, tasaCambioParameter, idActividadParameter, idPrematriculaParameter, aLCodigoParameter, estudianteCarneParameter, idEmpleadoParameter, idProveedorParameter, idAgenteExternoParameter, recibimosParameter, efectivoParameter, chequeParameter, tarjetaCreditoParameter, pagareParameter, bonoParameter, montoParameter, idFuenteFinanciamientoParameter, idConceptoParameter, eventoParameter);
        }
    
        public virtual int Sp_Recibo_Matricula(Nullable<int> idRecibo, string serieRecibo, Nullable<byte> idPrograma, Nullable<byte> idRecinto, Nullable<byte> idPeriodoEspecifico, Nullable<System.DateTime> fecha, Nullable<byte> tipoMoneda, Nullable<decimal> tasaCambio, Nullable<byte> idActividad, Nullable<int> idPrematricula, string aLCodigo, string estudianteCarne, Nullable<int> idEmpleado, Nullable<int> idProveedor, Nullable<int> idAgenteExterno, string recibimos, Nullable<bool> efectivo, Nullable<bool> cheque, Nullable<bool> tarjetaCredito, Nullable<bool> pagare, Nullable<bool> bono, Nullable<decimal> monto, Nullable<byte> idFuenteFinanciamiento, Nullable<short> idConcepto, Nullable<byte> evento)
        {
            var idReciboParameter = idRecibo.HasValue ?
                new ObjectParameter("IdRecibo", idRecibo) :
                new ObjectParameter("IdRecibo", typeof(int));
    
            var serieReciboParameter = serieRecibo != null ?
                new ObjectParameter("SerieRecibo", serieRecibo) :
                new ObjectParameter("SerieRecibo", typeof(string));
    
            var idProgramaParameter = idPrograma.HasValue ?
                new ObjectParameter("IdPrograma", idPrograma) :
                new ObjectParameter("IdPrograma", typeof(byte));
    
            var idRecintoParameter = idRecinto.HasValue ?
                new ObjectParameter("IdRecinto", idRecinto) :
                new ObjectParameter("IdRecinto", typeof(byte));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var tasaCambioParameter = tasaCambio.HasValue ?
                new ObjectParameter("TasaCambio", tasaCambio) :
                new ObjectParameter("TasaCambio", typeof(decimal));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var idPrematriculaParameter = idPrematricula.HasValue ?
                new ObjectParameter("IdPrematricula", idPrematricula) :
                new ObjectParameter("IdPrematricula", typeof(int));
    
            var aLCodigoParameter = aLCodigo != null ?
                new ObjectParameter("ALCodigo", aLCodigo) :
                new ObjectParameter("ALCodigo", typeof(string));
    
            var estudianteCarneParameter = estudianteCarne != null ?
                new ObjectParameter("EstudianteCarne", estudianteCarne) :
                new ObjectParameter("EstudianteCarne", typeof(string));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("IdProveedor", idProveedor) :
                new ObjectParameter("IdProveedor", typeof(int));
    
            var idAgenteExternoParameter = idAgenteExterno.HasValue ?
                new ObjectParameter("IdAgenteExterno", idAgenteExterno) :
                new ObjectParameter("IdAgenteExterno", typeof(int));
    
            var recibimosParameter = recibimos != null ?
                new ObjectParameter("Recibimos", recibimos) :
                new ObjectParameter("Recibimos", typeof(string));
    
            var efectivoParameter = efectivo.HasValue ?
                new ObjectParameter("Efectivo", efectivo) :
                new ObjectParameter("Efectivo", typeof(bool));
    
            var chequeParameter = cheque.HasValue ?
                new ObjectParameter("Cheque", cheque) :
                new ObjectParameter("Cheque", typeof(bool));
    
            var tarjetaCreditoParameter = tarjetaCredito.HasValue ?
                new ObjectParameter("TarjetaCredito", tarjetaCredito) :
                new ObjectParameter("TarjetaCredito", typeof(bool));
    
            var pagareParameter = pagare.HasValue ?
                new ObjectParameter("Pagare", pagare) :
                new ObjectParameter("Pagare", typeof(bool));
    
            var bonoParameter = bono.HasValue ?
                new ObjectParameter("Bono", bono) :
                new ObjectParameter("Bono", typeof(bool));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var idConceptoParameter = idConcepto.HasValue ?
                new ObjectParameter("IdConcepto", idConcepto) :
                new ObjectParameter("IdConcepto", typeof(short));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Recibo_Matricula", idReciboParameter, serieReciboParameter, idProgramaParameter, idRecintoParameter, idPeriodoEspecificoParameter, fechaParameter, tipoMonedaParameter, tasaCambioParameter, idActividadParameter, idPrematriculaParameter, aLCodigoParameter, estudianteCarneParameter, idEmpleadoParameter, idProveedorParameter, idAgenteExternoParameter, recibimosParameter, efectivoParameter, chequeParameter, tarjetaCreditoParameter, pagareParameter, bonoParameter, montoParameter, idFuenteFinanciamientoParameter, idConceptoParameter, eventoParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_RendicionesDevueltas(Nullable<int> idRendicion, Nullable<int> noCheque, Nullable<int> idSolCk, string idYear, Nullable<System.DateTime> fecha, string observaciones, Nullable<bool> e_aritmenticos, Nullable<bool> e_manchones, Nullable<bool> e_soportes, Nullable<bool> e_conceptos, Nullable<bool> e_beneficiarios, Nullable<bool> e_autorizado, Nullable<bool> e_desglose, Nullable<bool> e_cartajustificacion, Nullable<bool> e_otrasinconsistencias, Nullable<System.DateTime> fechaRecepcion, Nullable<byte> evento, Nullable<byte> operacion)
        {
            var idRendicionParameter = idRendicion.HasValue ?
                new ObjectParameter("IdRendicion", idRendicion) :
                new ObjectParameter("IdRendicion", typeof(int));
    
            var noChequeParameter = noCheque.HasValue ?
                new ObjectParameter("NoCheque", noCheque) :
                new ObjectParameter("NoCheque", typeof(int));
    
            var idSolCkParameter = idSolCk.HasValue ?
                new ObjectParameter("IdSolCk", idSolCk) :
                new ObjectParameter("IdSolCk", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var observacionesParameter = observaciones != null ?
                new ObjectParameter("Observaciones", observaciones) :
                new ObjectParameter("Observaciones", typeof(string));
    
            var e_aritmenticosParameter = e_aritmenticos.HasValue ?
                new ObjectParameter("e_aritmenticos", e_aritmenticos) :
                new ObjectParameter("e_aritmenticos", typeof(bool));
    
            var e_manchonesParameter = e_manchones.HasValue ?
                new ObjectParameter("e_manchones", e_manchones) :
                new ObjectParameter("e_manchones", typeof(bool));
    
            var e_soportesParameter = e_soportes.HasValue ?
                new ObjectParameter("e_soportes", e_soportes) :
                new ObjectParameter("e_soportes", typeof(bool));
    
            var e_conceptosParameter = e_conceptos.HasValue ?
                new ObjectParameter("e_conceptos", e_conceptos) :
                new ObjectParameter("e_conceptos", typeof(bool));
    
            var e_beneficiariosParameter = e_beneficiarios.HasValue ?
                new ObjectParameter("e_beneficiarios", e_beneficiarios) :
                new ObjectParameter("e_beneficiarios", typeof(bool));
    
            var e_autorizadoParameter = e_autorizado.HasValue ?
                new ObjectParameter("e_autorizado", e_autorizado) :
                new ObjectParameter("e_autorizado", typeof(bool));
    
            var e_desgloseParameter = e_desglose.HasValue ?
                new ObjectParameter("e_desglose", e_desglose) :
                new ObjectParameter("e_desglose", typeof(bool));
    
            var e_cartajustificacionParameter = e_cartajustificacion.HasValue ?
                new ObjectParameter("e_cartajustificacion", e_cartajustificacion) :
                new ObjectParameter("e_cartajustificacion", typeof(bool));
    
            var e_otrasinconsistenciasParameter = e_otrasinconsistencias.HasValue ?
                new ObjectParameter("e_otrasinconsistencias", e_otrasinconsistencias) :
                new ObjectParameter("e_otrasinconsistencias", typeof(bool));
    
            var fechaRecepcionParameter = fechaRecepcion.HasValue ?
                new ObjectParameter("FechaRecepcion", fechaRecepcion) :
                new ObjectParameter("FechaRecepcion", typeof(System.DateTime));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RendicionesDevueltas", idRendicionParameter, noChequeParameter, idSolCkParameter, idYearParameter, fechaParameter, observacionesParameter, e_aritmenticosParameter, e_manchonesParameter, e_soportesParameter, e_conceptosParameter, e_beneficiariosParameter, e_autorizadoParameter, e_desgloseParameter, e_cartajustificacionParameter, e_otrasinconsistenciasParameter, fechaRecepcionParameter, eventoParameter, operacionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_SolicitudCheque(Nullable<int> idSolicitud, string idYear, Nullable<int> idActividad, Nullable<int> idBeneficiario, Nullable<int> idPeriodo, Nullable<System.DateTime> fecha, Nullable<byte> tipoMoneda, Nullable<decimal> tasaCambio, Nullable<decimal> cantidad, string concepto, Nullable<bool> presupuesto, Nullable<byte> estado, Nullable<byte> idFuenteFinanciamiento, Nullable<short> idCuentaContable, Nullable<int> actividad, Nullable<int> idSolicitud_SIPPSI, Nullable<byte> operacion)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var idBeneficiarioParameter = idBeneficiario.HasValue ?
                new ObjectParameter("IdBeneficiario", idBeneficiario) :
                new ObjectParameter("IdBeneficiario", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var tasaCambioParameter = tasaCambio.HasValue ?
                new ObjectParameter("TasaCambio", tasaCambio) :
                new ObjectParameter("TasaCambio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var presupuestoParameter = presupuesto.HasValue ?
                new ObjectParameter("Presupuesto", presupuesto) :
                new ObjectParameter("Presupuesto", typeof(bool));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(short));
    
            var actividadParameter = actividad.HasValue ?
                new ObjectParameter("Actividad", actividad) :
                new ObjectParameter("Actividad", typeof(int));
    
            var idSolicitud_SIPPSIParameter = idSolicitud_SIPPSI.HasValue ?
                new ObjectParameter("IdSolicitud_SIPPSI", idSolicitud_SIPPSI) :
                new ObjectParameter("IdSolicitud_SIPPSI", typeof(int));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_SolicitudCheque", idSolicitudParameter, idYearParameter, idActividadParameter, idBeneficiarioParameter, idPeriodoParameter, fechaParameter, tipoMonedaParameter, tasaCambioParameter, cantidadParameter, conceptoParameter, presupuestoParameter, estadoParameter, idFuenteFinanciamientoParameter, idCuentaContableParameter, actividadParameter, idSolicitud_SIPPSIParameter, operacionParameter);
        }
    
        public virtual int Sp_SolicitudCheque_Estado_Upd(Nullable<int> idSolicitudCheque, string idYear, Nullable<byte> idEstado)
        {
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SolicitudCheque_Estado_Upd", idSolicitudChequeParameter, idYearParameter, idEstadoParameter);
        }
    
        public virtual int Sp_SolicitudCheque_V1(Nullable<int> idSolicitud, string idYear, Nullable<int> idActividad, Nullable<int> idBeneficiario, Nullable<int> idPeriodo, Nullable<System.DateTime> fecha, Nullable<byte> tipoMoneda, Nullable<decimal> tasaCambio, Nullable<decimal> cantidad, string concepto, Nullable<bool> presupuesto, Nullable<byte> estado, Nullable<byte> idFuenteFinanciamiento, Nullable<short> idCuentaContable, Nullable<byte> operacion)
        {
            var idSolicitudParameter = idSolicitud.HasValue ?
                new ObjectParameter("IdSolicitud", idSolicitud) :
                new ObjectParameter("IdSolicitud", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var idBeneficiarioParameter = idBeneficiario.HasValue ?
                new ObjectParameter("IdBeneficiario", idBeneficiario) :
                new ObjectParameter("IdBeneficiario", typeof(int));
    
            var idPeriodoParameter = idPeriodo.HasValue ?
                new ObjectParameter("IdPeriodo", idPeriodo) :
                new ObjectParameter("IdPeriodo", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(byte));
    
            var tasaCambioParameter = tasaCambio.HasValue ?
                new ObjectParameter("TasaCambio", tasaCambio) :
                new ObjectParameter("TasaCambio", typeof(decimal));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var presupuestoParameter = presupuesto.HasValue ?
                new ObjectParameter("Presupuesto", presupuesto) :
                new ObjectParameter("Presupuesto", typeof(bool));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(byte));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(short));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SolicitudCheque_V1", idSolicitudParameter, idYearParameter, idActividadParameter, idBeneficiarioParameter, idPeriodoParameter, fechaParameter, tipoMonedaParameter, tasaCambioParameter, cantidadParameter, conceptoParameter, presupuestoParameter, estadoParameter, idFuenteFinanciamientoParameter, idCuentaContableParameter, operacionParameter);
        }
    
        public virtual int Sp_SolicitudRegresada(Nullable<int> idSolicitudCheque, string idYear, Nullable<System.DateTime> fecha, string observacion)
        {
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var observacionParameter = observacion != null ?
                new ObjectParameter("Observacion", observacion) :
                new ObjectParameter("Observacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_SolicitudRegresada", idSolicitudChequeParameter, idYearParameter, fechaParameter, observacionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Sp_SolicitudTesoreria(Nullable<byte> operacion, Nullable<byte> tipo)
        {
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var tipoParameter = tipo.HasValue ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Sp_SolicitudTesoreria", operacionParameter, tipoParameter);
        }
    
        public virtual ObjectResult<sp_tables_info_rowset_64_Result> sp_tables_info_rowset_64(string table_name, string table_schema, string table_type)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var table_schemaParameter = table_schema != null ?
                new ObjectParameter("table_schema", table_schema) :
                new ObjectParameter("table_schema", typeof(string));
    
            var table_typeParameter = table_type != null ?
                new ObjectParameter("table_type", table_type) :
                new ObjectParameter("table_type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_tables_info_rowset_64_Result>("sp_tables_info_rowset_64", table_nameParameter, table_schemaParameter, table_typeParameter);
        }
    
        public virtual int sp_TareasActividad(string idActividad, string year)
        {
            var idActividadParameter = idActividad != null ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_TareasActividad", idActividadParameter, yearParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int Sp_Usuario(string login, Nullable<int> idOrden, string nombre, string descripcion, Nullable<bool> auditar, Nullable<bool> habilitado, Nullable<bool> activo, Nullable<bool> periodoVigente, Nullable<bool> periodoNoVigente, Nullable<bool> periodoCerrado, Nullable<bool> datoAdministrativo, Nullable<bool> datoOperativo, Nullable<bool> datoConfiguracion, Nullable<bool> todoPrograma, Nullable<bool> cambiarPassword, Nullable<byte> idProyecto, Nullable<byte> idActividad, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var idOrdenParameter = idOrden.HasValue ?
                new ObjectParameter("IdOrden", idOrden) :
                new ObjectParameter("IdOrden", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var auditarParameter = auditar.HasValue ?
                new ObjectParameter("Auditar", auditar) :
                new ObjectParameter("Auditar", typeof(bool));
    
            var habilitadoParameter = habilitado.HasValue ?
                new ObjectParameter("Habilitado", habilitado) :
                new ObjectParameter("Habilitado", typeof(bool));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var periodoVigenteParameter = periodoVigente.HasValue ?
                new ObjectParameter("PeriodoVigente", periodoVigente) :
                new ObjectParameter("PeriodoVigente", typeof(bool));
    
            var periodoNoVigenteParameter = periodoNoVigente.HasValue ?
                new ObjectParameter("PeriodoNoVigente", periodoNoVigente) :
                new ObjectParameter("PeriodoNoVigente", typeof(bool));
    
            var periodoCerradoParameter = periodoCerrado.HasValue ?
                new ObjectParameter("PeriodoCerrado", periodoCerrado) :
                new ObjectParameter("PeriodoCerrado", typeof(bool));
    
            var datoAdministrativoParameter = datoAdministrativo.HasValue ?
                new ObjectParameter("DatoAdministrativo", datoAdministrativo) :
                new ObjectParameter("DatoAdministrativo", typeof(bool));
    
            var datoOperativoParameter = datoOperativo.HasValue ?
                new ObjectParameter("DatoOperativo", datoOperativo) :
                new ObjectParameter("DatoOperativo", typeof(bool));
    
            var datoConfiguracionParameter = datoConfiguracion.HasValue ?
                new ObjectParameter("DatoConfiguracion", datoConfiguracion) :
                new ObjectParameter("DatoConfiguracion", typeof(bool));
    
            var todoProgramaParameter = todoPrograma.HasValue ?
                new ObjectParameter("TodoPrograma", todoPrograma) :
                new ObjectParameter("TodoPrograma", typeof(bool));
    
            var cambiarPasswordParameter = cambiarPassword.HasValue ?
                new ObjectParameter("CambiarPassword", cambiarPassword) :
                new ObjectParameter("CambiarPassword", typeof(bool));
    
            var idProyectoParameter = idProyecto.HasValue ?
                new ObjectParameter("IdProyecto", idProyecto) :
                new ObjectParameter("IdProyecto", typeof(byte));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(byte));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_Usuario", loginParameter, idOrdenParameter, nombreParameter, descripcionParameter, auditarParameter, habilitadoParameter, activoParameter, periodoVigenteParameter, periodoNoVigenteParameter, periodoCerradoParameter, datoAdministrativoParameter, datoOperativoParameter, datoConfiguracionParameter, todoProgramaParameter, cambiarPasswordParameter, idProyectoParameter, idActividadParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int Sp_VariacionCambiariaMod(Nullable<System.DateTime> fecha)
        {
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sp_VariacionCambiariaMod", fechaParameter);
        }
    
        public virtual int spr_Bancos_AsignaMontos(Nullable<int> idPeriodoGeneral, Nullable<int> idActividad, Nullable<int> p1, Nullable<decimal> m1, Nullable<int> p2, Nullable<decimal> m2, Nullable<int> p3, Nullable<decimal> m3, Nullable<int> p4, Nullable<decimal> m4, Nullable<int> p5, Nullable<decimal> m5, Nullable<int> p6, Nullable<decimal> m6, Nullable<int> p7, Nullable<decimal> m7, Nullable<int> p8, Nullable<decimal> m8, Nullable<int> p9, Nullable<decimal> m9, Nullable<int> p10, Nullable<decimal> m10, Nullable<int> p11, Nullable<decimal> m11, Nullable<int> p12, Nullable<decimal> m12)
        {
            var idPeriodoGeneralParameter = idPeriodoGeneral.HasValue ?
                new ObjectParameter("IdPeriodoGeneral", idPeriodoGeneral) :
                new ObjectParameter("IdPeriodoGeneral", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var p1Parameter = p1.HasValue ?
                new ObjectParameter("P1", p1) :
                new ObjectParameter("P1", typeof(int));
    
            var m1Parameter = m1.HasValue ?
                new ObjectParameter("M1", m1) :
                new ObjectParameter("M1", typeof(decimal));
    
            var p2Parameter = p2.HasValue ?
                new ObjectParameter("P2", p2) :
                new ObjectParameter("P2", typeof(int));
    
            var m2Parameter = m2.HasValue ?
                new ObjectParameter("M2", m2) :
                new ObjectParameter("M2", typeof(decimal));
    
            var p3Parameter = p3.HasValue ?
                new ObjectParameter("P3", p3) :
                new ObjectParameter("P3", typeof(int));
    
            var m3Parameter = m3.HasValue ?
                new ObjectParameter("M3", m3) :
                new ObjectParameter("M3", typeof(decimal));
    
            var p4Parameter = p4.HasValue ?
                new ObjectParameter("P4", p4) :
                new ObjectParameter("P4", typeof(int));
    
            var m4Parameter = m4.HasValue ?
                new ObjectParameter("M4", m4) :
                new ObjectParameter("M4", typeof(decimal));
    
            var p5Parameter = p5.HasValue ?
                new ObjectParameter("P5", p5) :
                new ObjectParameter("P5", typeof(int));
    
            var m5Parameter = m5.HasValue ?
                new ObjectParameter("M5", m5) :
                new ObjectParameter("M5", typeof(decimal));
    
            var p6Parameter = p6.HasValue ?
                new ObjectParameter("P6", p6) :
                new ObjectParameter("P6", typeof(int));
    
            var m6Parameter = m6.HasValue ?
                new ObjectParameter("M6", m6) :
                new ObjectParameter("M6", typeof(decimal));
    
            var p7Parameter = p7.HasValue ?
                new ObjectParameter("P7", p7) :
                new ObjectParameter("P7", typeof(int));
    
            var m7Parameter = m7.HasValue ?
                new ObjectParameter("M7", m7) :
                new ObjectParameter("M7", typeof(decimal));
    
            var p8Parameter = p8.HasValue ?
                new ObjectParameter("P8", p8) :
                new ObjectParameter("P8", typeof(int));
    
            var m8Parameter = m8.HasValue ?
                new ObjectParameter("M8", m8) :
                new ObjectParameter("M8", typeof(decimal));
    
            var p9Parameter = p9.HasValue ?
                new ObjectParameter("P9", p9) :
                new ObjectParameter("P9", typeof(int));
    
            var m9Parameter = m9.HasValue ?
                new ObjectParameter("M9", m9) :
                new ObjectParameter("M9", typeof(decimal));
    
            var p10Parameter = p10.HasValue ?
                new ObjectParameter("P10", p10) :
                new ObjectParameter("P10", typeof(int));
    
            var m10Parameter = m10.HasValue ?
                new ObjectParameter("M10", m10) :
                new ObjectParameter("M10", typeof(decimal));
    
            var p11Parameter = p11.HasValue ?
                new ObjectParameter("P11", p11) :
                new ObjectParameter("P11", typeof(int));
    
            var m11Parameter = m11.HasValue ?
                new ObjectParameter("M11", m11) :
                new ObjectParameter("M11", typeof(decimal));
    
            var p12Parameter = p12.HasValue ?
                new ObjectParameter("P12", p12) :
                new ObjectParameter("P12", typeof(int));
    
            var m12Parameter = m12.HasValue ?
                new ObjectParameter("M12", m12) :
                new ObjectParameter("M12", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spr_Bancos_AsignaMontos", idPeriodoGeneralParameter, idActividadParameter, p1Parameter, m1Parameter, p2Parameter, m2Parameter, p3Parameter, m3Parameter, p4Parameter, m4Parameter, p5Parameter, m5Parameter, p6Parameter, m6Parameter, p7Parameter, m7Parameter, p8Parameter, m8Parameter, p9Parameter, m9Parameter, p10Parameter, m10Parameter, p11Parameter, m11Parameter, p12Parameter, m12Parameter);
        }
    
        public virtual ObjectResult<spro_CtaBanco_Result> spro_CtaBanco(Nullable<int> moneda)
        {
            var monedaParameter = moneda.HasValue ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spro_CtaBanco_Result>("spro_CtaBanco", monedaParameter);
        }
    
        public virtual ObjectResult<spro_GeneraLineasCuenta_Result> spro_GeneraLineasCuenta(Nullable<int> idPeriodoEspecifico, Nullable<int> idCuentaContable)
        {
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spro_GeneraLineasCuenta_Result>("spro_GeneraLineasCuenta", idPeriodoEspecificoParameter, idCuentaContableParameter);
        }
    
        public virtual int sproc_AutorizaRendicion(string login, Nullable<int> idComprobantePago, Nullable<int> idSolicitudCheque, string idYear, Nullable<byte> idTipo)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var idComprobantePagoParameter = idComprobantePago.HasValue ?
                new ObjectParameter("IdComprobantePago", idComprobantePago) :
                new ObjectParameter("IdComprobantePago", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var idTipoParameter = idTipo.HasValue ?
                new ObjectParameter("IdTipo", idTipo) :
                new ObjectParameter("IdTipo", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_AutorizaRendicion", loginParameter, idComprobantePagoParameter, idSolicitudChequeParameter, idYearParameter, idTipoParameter);
        }
    
        public virtual int sproc_BusquedaCuentaCobtable(string loginCreacion, Nullable<byte> evento)
        {
            var loginCreacionParameter = loginCreacion != null ?
                new ObjectParameter("LoginCreacion", loginCreacion) :
                new ObjectParameter("LoginCreacion", typeof(string));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_BusquedaCuentaCobtable", loginCreacionParameter, eventoParameter);
        }
    
        public virtual int sproc_BusquedaFuenteFinanciamiento(string loginCreacion, Nullable<byte> evento)
        {
            var loginCreacionParameter = loginCreacion != null ?
                new ObjectParameter("LoginCreacion", loginCreacion) :
                new ObjectParameter("LoginCreacion", typeof(string));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_BusquedaFuenteFinanciamiento", loginCreacionParameter, eventoParameter);
        }
    
        public virtual int sproc_CargarEstadosCheques(string loginCreacion)
        {
            var loginCreacionParameter = loginCreacion != null ?
                new ObjectParameter("LoginCreacion", loginCreacion) :
                new ObjectParameter("LoginCreacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_CargarEstadosCheques", loginCreacionParameter);
        }
    
        public virtual int sproc_CargarUsuariosCheques(string loginCreacion, string fI, string fF)
        {
            var loginCreacionParameter = loginCreacion != null ?
                new ObjectParameter("LoginCreacion", loginCreacion) :
                new ObjectParameter("LoginCreacion", typeof(string));
    
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_CargarUsuariosCheques", loginCreacionParameter, fIParameter, fFParameter);
        }
    
        public virtual int sproc_ComprobantesaRendir(string fF)
        {
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_ComprobantesaRendir", fFParameter);
        }
    
        public virtual int sproc_DeleteLinea(Nullable<int> idActividad, Nullable<int> secuencia)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var secuenciaParameter = secuencia.HasValue ?
                new ObjectParameter("Secuencia", secuencia) :
                new ObjectParameter("Secuencia", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_DeleteLinea", idActividadParameter, secuenciaParameter);
        }
    
        public virtual int sproc_DeleteLineaTransferencia(Nullable<int> idActividad)
        {
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_DeleteLineaTransferencia", idActividadParameter);
        }
    
        public virtual int sproc_Distribucion(Nullable<int> idDistribucion, Nullable<int> idTransferencia, Nullable<int> periodo, Nullable<System.DateTime> fecha, Nullable<int> idImpresion, Nullable<byte> estado, Nullable<decimal> tC, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idDistribucionParameter = idDistribucion.HasValue ?
                new ObjectParameter("IdDistribucion", idDistribucion) :
                new ObjectParameter("IdDistribucion", typeof(int));
    
            var idTransferenciaParameter = idTransferencia.HasValue ?
                new ObjectParameter("IdTransferencia", idTransferencia) :
                new ObjectParameter("IdTransferencia", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idImpresionParameter = idImpresion.HasValue ?
                new ObjectParameter("IdImpresion", idImpresion) :
                new ObjectParameter("IdImpresion", typeof(int));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var tCParameter = tC.HasValue ?
                new ObjectParameter("TC", tC) :
                new ObjectParameter("TC", typeof(decimal));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_Distribucion", idDistribucionParameter, idTransferenciaParameter, periodoParameter, fechaParameter, idImpresionParameter, estadoParameter, tCParameter, operacionParameter, eventoParameter);
        }
    
        public virtual ObjectResult<string> sproc_EditaCategoriaCuenta(Nullable<int> idCuentaContable, Nullable<byte> idRecinto, Nullable<byte> idDocumento, Nullable<byte> nAccion)
        {
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var idRecintoParameter = idRecinto.HasValue ?
                new ObjectParameter("IdRecinto", idRecinto) :
                new ObjectParameter("IdRecinto", typeof(byte));
    
            var idDocumentoParameter = idDocumento.HasValue ?
                new ObjectParameter("IdDocumento", idDocumento) :
                new ObjectParameter("IdDocumento", typeof(byte));
    
            var nAccionParameter = nAccion.HasValue ?
                new ObjectParameter("nAccion", nAccion) :
                new ObjectParameter("nAccion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sproc_EditaCategoriaCuenta", idCuentaContableParameter, idRecintoParameter, idDocumentoParameter, nAccionParameter);
        }
    
        public virtual int sproc_GeneraAnticiposGastos(string login)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_GeneraAnticiposGastos", loginParameter);
        }
    
        public virtual int sproc_GeneraChequesArchivo(string strFI, string strFF)
        {
            var strFIParameter = strFI != null ?
                new ObjectParameter("strFI", strFI) :
                new ObjectParameter("strFI", typeof(string));
    
            var strFFParameter = strFF != null ?
                new ObjectParameter("strFF", strFF) :
                new ObjectParameter("strFF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_GeneraChequesArchivo", strFIParameter, strFFParameter);
        }
    
        public virtual int sproc_GeneraEstadoCuenta_X_CC(Nullable<byte> codigo, string fI, string fF)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(byte));
    
            var fIParameter = fI != null ?
                new ObjectParameter("FI", fI) :
                new ObjectParameter("FI", typeof(string));
    
            var fFParameter = fF != null ?
                new ObjectParameter("FF", fF) :
                new ObjectParameter("FF", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_GeneraEstadoCuenta_X_CC", codigoParameter, fIParameter, fFParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sproc_InsertLinea(Nullable<int> periodo, Nullable<int> idActividad, Nullable<int> idFuente, Nullable<decimal> monto)
        {
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sproc_InsertLinea", periodoParameter, idActividadParameter, idFuenteParameter, montoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sproc_InsertLineaTransferencia(Nullable<int> periodo, Nullable<int> idActividad, Nullable<int> idFuente, Nullable<decimal> debe, Nullable<decimal> haber)
        {
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            var debeParameter = debe.HasValue ?
                new ObjectParameter("Debe", debe) :
                new ObjectParameter("Debe", typeof(decimal));
    
            var haberParameter = haber.HasValue ?
                new ObjectParameter("Haber", haber) :
                new ObjectParameter("Haber", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sproc_InsertLineaTransferencia", periodoParameter, idActividadParameter, idFuenteParameter, debeParameter, haberParameter);
        }
    
        public virtual int sproc_LogError(Nullable<int> errorNumber, string errMessage, string carnet, Nullable<int> recibo, string serie)
        {
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var errMessageParameter = errMessage != null ?
                new ObjectParameter("ErrMessage", errMessage) :
                new ObjectParameter("ErrMessage", typeof(string));
    
            var carnetParameter = carnet != null ?
                new ObjectParameter("Carnet", carnet) :
                new ObjectParameter("Carnet", typeof(string));
    
            var reciboParameter = recibo.HasValue ?
                new ObjectParameter("Recibo", recibo) :
                new ObjectParameter("Recibo", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_LogError", errorNumberParameter, errMessageParameter, carnetParameter, reciboParameter, serieParameter);
        }
    
        public virtual int sproc_ParametrizarBeneficiarios(Nullable<int> codigo, Nullable<int> idEmpleado_RRHH, Nullable<int> idEmpleado, Nullable<int> idBeneficiario)
        {
            var codigoParameter = codigo.HasValue ?
                new ObjectParameter("Codigo", codigo) :
                new ObjectParameter("Codigo", typeof(int));
    
            var idEmpleado_RRHHParameter = idEmpleado_RRHH.HasValue ?
                new ObjectParameter("IdEmpleado_RRHH", idEmpleado_RRHH) :
                new ObjectParameter("IdEmpleado_RRHH", typeof(int));
    
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("IdEmpleado", idEmpleado) :
                new ObjectParameter("IdEmpleado", typeof(int));
    
            var idBeneficiarioParameter = idBeneficiario.HasValue ?
                new ObjectParameter("IdBeneficiario", idBeneficiario) :
                new ObjectParameter("IdBeneficiario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_ParametrizarBeneficiarios", codigoParameter, idEmpleado_RRHHParameter, idEmpleadoParameter, idBeneficiarioParameter);
        }
    
        public virtual int sproc_ParametroIngreosNC(Nullable<int> operacion)
        {
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_ParametroIngreosNC", operacionParameter);
        }
    
        public virtual int sproc_PrestamosDocumentos(Nullable<int> iDPrestamo, Nullable<System.DateTime> fecha, string concepto, Nullable<byte> tipoDocumento, Nullable<int> idComprobante, Nullable<byte> idPeriodoEspecifico, Nullable<int> idSolicitudCheque, string idYear, Nullable<byte> operacion)
        {
            var iDPrestamoParameter = iDPrestamo.HasValue ?
                new ObjectParameter("IDPrestamo", iDPrestamo) :
                new ObjectParameter("IDPrestamo", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var tipoDocumentoParameter = tipoDocumento.HasValue ?
                new ObjectParameter("TipoDocumento", tipoDocumento) :
                new ObjectParameter("TipoDocumento", typeof(byte));
    
            var idComprobanteParameter = idComprobante.HasValue ?
                new ObjectParameter("IdComprobante", idComprobante) :
                new ObjectParameter("IdComprobante", typeof(int));
    
            var idPeriodoEspecificoParameter = idPeriodoEspecifico.HasValue ?
                new ObjectParameter("IdPeriodoEspecifico", idPeriodoEspecifico) :
                new ObjectParameter("IdPeriodoEspecifico", typeof(byte));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var idYearParameter = idYear != null ?
                new ObjectParameter("IdYear", idYear) :
                new ObjectParameter("IdYear", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_PrestamosDocumentos", iDPrestamoParameter, fechaParameter, conceptoParameter, tipoDocumentoParameter, idComprobanteParameter, idPeriodoEspecificoParameter, idSolicitudChequeParameter, idYearParameter, operacionParameter);
        }
    
        public virtual int sproc_PrestamosDocumentos_Estado_Update(Nullable<int> idPrestamo, Nullable<byte> idEstado)
        {
            var idPrestamoParameter = idPrestamo.HasValue ?
                new ObjectParameter("IdPrestamo", idPrestamo) :
                new ObjectParameter("IdPrestamo", typeof(int));
    
            var idEstadoParameter = idEstado.HasValue ?
                new ObjectParameter("IdEstado", idEstado) :
                new ObjectParameter("IdEstado", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_PrestamosDocumentos_Estado_Update", idPrestamoParameter, idEstadoParameter);
        }
    
        public virtual int sproc_PrintError(Nullable<int> errNumber, string errMessage)
        {
            var errNumberParameter = errNumber.HasValue ?
                new ObjectParameter("ErrNumber", errNumber) :
                new ObjectParameter("ErrNumber", typeof(int));
    
            var errMessageParameter = errMessage != null ?
                new ObjectParameter("ErrMessage", errMessage) :
                new ObjectParameter("ErrMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_PrintError", errNumberParameter, errMessageParameter);
        }
    
        public virtual int sproc_RegistraArancelesSIRA(Nullable<int> nROC, string serie)
        {
            var nROCParameter = nROC.HasValue ?
                new ObjectParameter("NROC", nROC) :
                new ObjectParameter("NROC", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_RegistraArancelesSIRA", nROCParameter, serieParameter);
        }
    
        public virtual int sproc_RegistraArancelesSIRA_V12(Nullable<int> nROC, string serie, Nullable<int> idActividad, ObjectParameter errorNumber, ObjectParameter errorMessage)
        {
            var nROCParameter = nROC.HasValue ?
                new ObjectParameter("NROC", nROC) :
                new ObjectParameter("NROC", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            var idActividadParameter = idActividad.HasValue ?
                new ObjectParameter("IdActividad", idActividad) :
                new ObjectParameter("IdActividad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_RegistraArancelesSIRA_V12", nROCParameter, serieParameter, idActividadParameter, errorNumber, errorMessage);
        }
    
        public virtual int sproc_RegistraArancelesSIRA_V2(Nullable<int> nROC, string serie)
        {
            var nROCParameter = nROC.HasValue ?
                new ObjectParameter("NROC", nROC) :
                new ObjectParameter("NROC", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_RegistraArancelesSIRA_V2", nROCParameter, serieParameter);
        }
    
        public virtual ObjectResult<string> sproc_RegistraCuentaCategoria(Nullable<int> idCategoria, Nullable<int> evento)
        {
            var idCategoriaParameter = idCategoria.HasValue ?
                new ObjectParameter("IdCategoria", idCategoria) :
                new ObjectParameter("IdCategoria", typeof(int));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sproc_RegistraCuentaCategoria", idCategoriaParameter, eventoParameter);
        }
    
        public virtual int sproc_ResetPassword(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_ResetPassword", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> sproc_SaldoDisponible_SiPPSI(Nullable<int> anio, Nullable<byte> idMes, Nullable<byte> idFuente, Nullable<int> idArea)
        {
            var anioParameter = anio.HasValue ?
                new ObjectParameter("Anio", anio) :
                new ObjectParameter("Anio", typeof(int));
    
            var idMesParameter = idMes.HasValue ?
                new ObjectParameter("IdMes", idMes) :
                new ObjectParameter("IdMes", typeof(byte));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(byte));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("sproc_SaldoDisponible_SiPPSI", anioParameter, idMesParameter, idFuenteParameter, idAreaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sproc_SolicitudSIPPSI(Nullable<int> idSolicitudSIPPSI, Nullable<int> idSolicitudSIFA, Nullable<byte> accion)
        {
            var idSolicitudSIPPSIParameter = idSolicitudSIPPSI.HasValue ?
                new ObjectParameter("IdSolicitudSIPPSI", idSolicitudSIPPSI) :
                new ObjectParameter("IdSolicitudSIPPSI", typeof(int));
    
            var idSolicitudSIFAParameter = idSolicitudSIFA.HasValue ?
                new ObjectParameter("IdSolicitudSIFA", idSolicitudSIFA) :
                new ObjectParameter("IdSolicitudSIFA", typeof(int));
    
            var accionParameter = accion.HasValue ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sproc_SolicitudSIPPSI", idSolicitudSIPPSIParameter, idSolicitudSIFAParameter, accionParameter);
        }
    
        public virtual int sproc_TransferenciaAreas(Nullable<int> idTransferencia, Nullable<int> periodo, Nullable<int> idFuente, Nullable<int> idArea, Nullable<System.DateTime> fecha, Nullable<byte> estado, Nullable<int> idImpresion, string strConcepto, Nullable<byte> operacion, Nullable<byte> evento)
        {
            var idTransferenciaParameter = idTransferencia.HasValue ?
                new ObjectParameter("IdTransferencia", idTransferencia) :
                new ObjectParameter("IdTransferencia", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var idFuenteParameter = idFuente.HasValue ?
                new ObjectParameter("IdFuente", idFuente) :
                new ObjectParameter("IdFuente", typeof(int));
    
            var idAreaParameter = idArea.HasValue ?
                new ObjectParameter("IdArea", idArea) :
                new ObjectParameter("IdArea", typeof(int));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var estadoParameter = estado.HasValue ?
                new ObjectParameter("Estado", estado) :
                new ObjectParameter("Estado", typeof(byte));
    
            var idImpresionParameter = idImpresion.HasValue ?
                new ObjectParameter("IdImpresion", idImpresion) :
                new ObjectParameter("IdImpresion", typeof(int));
    
            var strConceptoParameter = strConcepto != null ?
                new ObjectParameter("strConcepto", strConcepto) :
                new ObjectParameter("strConcepto", typeof(string));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            var eventoParameter = evento.HasValue ?
                new ObjectParameter("Evento", evento) :
                new ObjectParameter("Evento", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_TransferenciaAreas", idTransferenciaParameter, periodoParameter, idFuenteParameter, idAreaParameter, fechaParameter, estadoParameter, idImpresionParameter, strConceptoParameter, operacionParameter, eventoParameter);
        }
    
        public virtual int sproc_Transferencias(Nullable<int> idTransferencia, Nullable<int> idFuenteFinanciamiento, Nullable<int> idCuentaBanco, Nullable<int> periodo, string docReferncia, string strDescripcion, Nullable<decimal> monto, Nullable<System.DateTime> fecha, Nullable<byte> idMoneda, Nullable<decimal> tasaCambio, Nullable<byte> operacion)
        {
            var idTransferenciaParameter = idTransferencia.HasValue ?
                new ObjectParameter("IdTransferencia", idTransferencia) :
                new ObjectParameter("IdTransferencia", typeof(int));
    
            var idFuenteFinanciamientoParameter = idFuenteFinanciamiento.HasValue ?
                new ObjectParameter("IdFuenteFinanciamiento", idFuenteFinanciamiento) :
                new ObjectParameter("IdFuenteFinanciamiento", typeof(int));
    
            var idCuentaBancoParameter = idCuentaBanco.HasValue ?
                new ObjectParameter("IdCuentaBanco", idCuentaBanco) :
                new ObjectParameter("IdCuentaBanco", typeof(int));
    
            var periodoParameter = periodo.HasValue ?
                new ObjectParameter("Periodo", periodo) :
                new ObjectParameter("Periodo", typeof(int));
    
            var docRefernciaParameter = docReferncia != null ?
                new ObjectParameter("DocReferncia", docReferncia) :
                new ObjectParameter("DocReferncia", typeof(string));
    
            var strDescripcionParameter = strDescripcion != null ?
                new ObjectParameter("strDescripcion", strDescripcion) :
                new ObjectParameter("strDescripcion", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(System.DateTime));
    
            var idMonedaParameter = idMoneda.HasValue ?
                new ObjectParameter("IdMoneda", idMoneda) :
                new ObjectParameter("IdMoneda", typeof(byte));
    
            var tasaCambioParameter = tasaCambio.HasValue ?
                new ObjectParameter("TasaCambio", tasaCambio) :
                new ObjectParameter("TasaCambio", typeof(decimal));
    
            var operacionParameter = operacion.HasValue ?
                new ObjectParameter("Operacion", operacion) :
                new ObjectParameter("Operacion", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_Transferencias", idTransferenciaParameter, idFuenteFinanciamientoParameter, idCuentaBancoParameter, periodoParameter, docRefernciaParameter, strDescripcionParameter, montoParameter, fechaParameter, idMonedaParameter, tasaCambioParameter, operacionParameter);
        }
    
        public virtual int sproc_VincularDocumentos(Nullable<int> idComprobanteDiario, Nullable<int> idComprobantePago, Nullable<int> idSolicitudCheque, string año, Nullable<int> idCuentaContable)
        {
            var idComprobanteDiarioParameter = idComprobanteDiario.HasValue ?
                new ObjectParameter("IdComprobanteDiario", idComprobanteDiario) :
                new ObjectParameter("IdComprobanteDiario", typeof(int));
    
            var idComprobantePagoParameter = idComprobantePago.HasValue ?
                new ObjectParameter("IdComprobantePago", idComprobantePago) :
                new ObjectParameter("IdComprobantePago", typeof(int));
    
            var idSolicitudChequeParameter = idSolicitudCheque.HasValue ?
                new ObjectParameter("IdSolicitudCheque", idSolicitudCheque) :
                new ObjectParameter("IdSolicitudCheque", typeof(int));
    
            var añoParameter = año != null ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(string));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sproc_VincularDocumentos", idComprobanteDiarioParameter, idComprobantePagoParameter, idSolicitudChequeParameter, añoParameter, idCuentaContableParameter);
        }
    
        public virtual int sp_InsertarOrdenPago(string noOrden, string recibimos, string concepto, Nullable<decimal> monto, Nullable<int> tipoMoneda, string usuario, Nullable<int> idAreaRRHH, Nullable<int> idCuentaContable, string sistema)
        {
            var noOrdenParameter = noOrden != null ?
                new ObjectParameter("NoOrden", noOrden) :
                new ObjectParameter("NoOrden", typeof(string));
    
            var recibimosParameter = recibimos != null ?
                new ObjectParameter("Recibimos", recibimos) :
                new ObjectParameter("Recibimos", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var montoParameter = monto.HasValue ?
                new ObjectParameter("Monto", monto) :
                new ObjectParameter("Monto", typeof(decimal));
    
            var tipoMonedaParameter = tipoMoneda.HasValue ?
                new ObjectParameter("TipoMoneda", tipoMoneda) :
                new ObjectParameter("TipoMoneda", typeof(int));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var idAreaRRHHParameter = idAreaRRHH.HasValue ?
                new ObjectParameter("IdAreaRRHH", idAreaRRHH) :
                new ObjectParameter("IdAreaRRHH", typeof(int));
    
            var idCuentaContableParameter = idCuentaContable.HasValue ?
                new ObjectParameter("IdCuentaContable", idCuentaContable) :
                new ObjectParameter("IdCuentaContable", typeof(int));
    
            var sistemaParameter = sistema != null ?
                new ObjectParameter("Sistema", sistema) :
                new ObjectParameter("Sistema", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertarOrdenPago", noOrdenParameter, recibimosParameter, conceptoParameter, montoParameter, tipoMonedaParameter, usuarioParameter, idAreaRRHHParameter, idCuentaContableParameter, sistemaParameter);
        }
    
        public virtual int fn_ObtenerInfoUsuario(string noInterno)
        {
            var noInternoParameter = noInterno != null ?
                new ObjectParameter("NoInterno", noInterno) :
                new ObjectParameter("NoInterno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("fn_ObtenerInfoUsuario", noInternoParameter);
        }
    }
}
